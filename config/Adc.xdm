<?xml version='1.0'?>
<datamodel version="3.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/08/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/08/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">
<!--
*   @file    Adc.xdm
*   @version 1.0.2
*
*   @brief   AUTOSAR Adc - Tresos Studio plugin schema file
*   @details This file contains the schema configuration for and Adc Tresos Studio
*            plugin.
-->
<!--
====================================================================================================
*   Project              : AUTOSAR 4.3 MCAL
*   Platform             : ARM
*   Peripheral           : ADC12BSARV2
*   Dependencies         : none
*
*   Autosar Version      : 4.3.1
*   Autosar Revision     : ASR_REL_4_3_REV_0001
*   Autosar Conf.Variant :
*   SW Version           : 1.0.2
*   Build Version        : S32K1XX_MCAL_1_0_2_RTM_ASR_REL_4_3_REV_0001_23-Apr-21

*   (c) Copyright 2006-2016 Freescale Semiconductor, Inc. 
*       Copyright 2017-2021 NXP
*   All Rights Reserved.
====================================================================================================
====================================================================================================
====================================================================================================
-->    
  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd" >
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_T40D2M10I2R0" type="AR-PACKAGE">
        <a:a name="UUID" value="ECUC:d2455832-7e3a-4ea7-a76c-86b3aa137c21"/>
        <d:lst type="ELEMENTS">
          <!--  /** @implements Adc_Object */ -->
          <d:chc name="Adc" type="AR-ELEMENT" value="MODULE-DEF">
          
            <v:ctr type="MODULE-DEF">
              <a:a name="RELEASE" value="asc:4.3"/>
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.6.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2014-10-31</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="POSTBUILDVARIANTSUPPORT" value="true"/>
              <a:a name="DESC" 
                   value="EN: Configuration of the Adc (Analog Digital Conversion) module."/>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="ECUC:333130d5-408b-40e9-9bc8-35ebc4976bfe"/>
              
              <!--  /** @implements  ConfigVariant_Object */ -->
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="DESC">
                  <a:v>
                    <![CDATA[EN:<html><p>
                         Configuration classes.
                         Enable the parameters that are editable for specific configuration classes
                         </p></html>]]>
                  </a:v>
                </a:a>
                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="LABEL" value="Config Variant"/>
                <a:a name="UUID" value="ECUC:1f10a459-ede1-4768-8df1-10750395700b"/>
                <a:da name="DEFAULT" value="VariantPostBuild"/>
                <a:da name="RANGE">
                  <a:v>VariantPostBuild</a:v>
                  <a:v>VariantPreCompile</a:v>
                </a:da>
              </v:var>

              <!-- ADC390_Conf -->
              <!--  @implements AdcConfigSet_Object  -->
              <v:ctr name="AdcConfigSet"  type="IDENTIFIABLE">
                <a:a name="DESC">
                     <a:v><![CDATA[EN:<html><p>This container contains the configuration parameters and sub containers of the AUTOSAR Adc module.</p></html>]]></a:v>
                </a:a>
                <a:a name="UUID" value="ECUC:a90cc2c9-88db-4457-a5d4-ea8169f43be4"/>

                <!-- /** @implements AdcHwUnit_Object */ -->
                <v:lst name="AdcHwUnit" type="MAP">
                  <a:da name="MIN" value="1"/>
                  <a:da name="INVALID" type="XPath">
                     <a:tst expr="num:i(count(node:current()/*)) &gt; ecu:get(&apos;Adc.AdcConfigSet.AdcHwUnit&apos;)"
                     true="Maximum ADC Hardwares available for the selected derivative was exceeded."/>
                  </a:da>

                  <!-- ADC138, ADC242_Conf-->
                  <!-- AdcHwUnit Big container -->
                  <v:ctr name="AdcHwUnit" type="IDENTIFIABLE">
                    <a:a name="DESC"> 
                         <a:v><![CDATA[EN:<html><p>This container contains the Driver configuration (parameters) depending on grouping of channels.</p></html>]]></a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="UUID" value="ECUC:11e8f4a3-199b-4bc5-813a-d1c2b00940d4"/>
                    <a:da name="INVALID" type="XPath">
                        <a:tst expr="text:uniq(../*/AdcHwUnit/*/@name, @name)" false="Duplicate Hardware Unit name"/>
                    </a:da>

                    <!-- AdcTransferType -->
                    <v:var name="AdcTransferType" type="ENUMERATION">
                        <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Select the Interrupt or Dma transfer Type. If DMA is used, user must not run SW and HW groups at the same time on the same HW unit because the same DMA channel will be used for both. If DMA is required for AdcTransferType, it is recommended to keep AdcWithoutInterrupts as false, otherwise, DMA will not be configured and it will be user responsibilty to read the results from registers directly by calling Adc_ReadGroup</p></html>]]></a:v>
                        </a:a>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Adc Transfer Type"/>
                        <a:a name="ORIGIN" value="NXP"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" value="ECUC:75cd991e-dad4-43cb-be3e-39038b24b3d6"/>
                        <a:da name="DEFAULT" value="ADC_INTERRUPT"/>
                        <a:da name="RANGE">
                            <a:v>ADC_DMA</a:v>
                            <a:v>ADC_INTERRUPT</a:v>
                        </a:da>
                        <a:da name="INVALID" type="XPath">
                            <a:tst expr="(.= 'ADC_DMA') and ((ecu:get(&apos;AdcDMAPresent&apos;) = 'FALSE'))"
                                   true="DMA mode is not supported."/>
                            <a:tst expr="(.= 'ADC_DMA') and (../../../../AutosarExt/AdcEnableDmaTrasferMode ='false')"
                                   true="DMA functionality must be globally enabled in Adc/AutosarExt/AdcEnableDmaTrasferMode before configuring DMA transfer for this HW unit."/>
                            <a:tst expr="(not(node:fallback(../../*/AdcTransferType,'ADC_DMA') = 'ADC_DMA')) and (../../../../AutosarExt/AdcEnableDmaTrasferMode ='true')"
                          true="At least one HW Unit should be configured Transfer type is ADC_DMA when AdcEnableDmaTrasferMode is enabled."/>
                            <a:tst expr="(count(node:refs('ASPathDataOfSchema:/TS_T40D2M10I2R0/Mcl')/MclConfigSet/DMAChannel/*/MclDMAChannelEnable[.='true']/../DmaSource0[.= 'ADC0_COCO'])=0) and (.= 'ADC_DMA') and (../AdcHwUnitId = 'ADC0') and ((ecu:get('AdcDMAPresent') = 'TRUE'))"
                                   true="Dma channel with ADC0 source must be enabled in MCL for hardware unit 0"/>
                            <a:tst expr="(count(node:refs('ASPathDataOfSchema:/TS_T40D2M10I2R0/Mcl')/MclConfigSet/DMAChannel/*/MclDMAChannelEnable[.='true']/../DmaSource0[.= 'ADC1_COCO'])=0) and (.= 'ADC_DMA') and (../AdcHwUnitId = 'ADC1') and ((ecu:get('AdcDMAPresent') = 'TRUE'))"
                                   true="Dma channel with ADC1 source must be enabled in MCL for hardware unit 1"/>
                        </a:da>
                    </v:var>
                
                    <!-- ADC087_Conf -->
                    <!-- AdcClockSource -->
                    <v:var name="AdcClockSource" type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v><![CDATA[EN:<html><p>The ADC module specific clock input for the conversion unit can statically be configured to select different clock sources if provided by hardware.
                             <ul>
                             <li>ADC_ALTCLK1        - Alternate clock 1.</li>
                             </ul>.
                             </p></html>]]>
                        </a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                        <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="OPTIONAL" value="true"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="LABEL" value="Adc Source Clock"/>
                      <a:a name="UUID" value="ECUC:d71f4cb5-6572-479a-8b2a-da33e4580d86"/>
                      <a:da name="DEFAULT" value="ADC_ALTCLK1"/>
                      <a:da name="READONLY" value="true"/>
                      <a:da name="RANGE">
                          <a:v>ADC_ALTCLK1</a:v>
                      </a:da>
                    </v:var>
                      
                    <!-- ADC389_Conf -->
                    <!-- ADCHwUnitId -->
                    <v:var name="AdcHwUnitId" type="ENUMERATION">
                      <a:a name="DESC"> 
                        <a:v><![CDATA[EN:<html><p>Numeric ID of the HW Unit. This symbolic name allows accessing Hw Unit data.</p></html>]]></a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="LABEL" value="Adc Hardware Unit"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" value="ECUC:9846c516-26c9-4418-bb50-2cf4f3bd3278"/>
                    <a:da name="DEFAULT" type="XPath" expr="concat('ADC', string(node:fallback(node:current()/../@index,'0')))"/>
                    <a:da name="RANGE">
                        <a:v>ADC0</a:v>
                        <a:v>ADC1</a:v>
                    </a:da>
                      <a:da name="INVALID" type="XPath">
                        <a:tst expr="text:uniq(../../*/AdcHwUnitId, .)" false="Duplicate Hw Unit id"/>
                        <a:tst expr="(num:i(count(ecu:list(concat('Adc.AdcConfigSet.AdcHwUnit',substring-after((.),'ADC'),'.AdcChannel.AdcChannelId'))))=0)"
                               true="This hardware unit does not support any ADC channels, please select another hardware unit."/>
                        <a:tst expr="../../../../AdcInterrupt/*[AdcInterruptSource='ADC0_COCO']/AdcInterruptEnable = 'false' and (.='ADC0') and (../AdcTransferType = 'ADC_INTERRUPT') and (count(../AdcGroup/*[AdcWithoutInterrupts='false']) > 0 ) "
                               true="This Unit has configured some Groups that need to use interrupts, so the associated End of Conversion interrupt must be enabled in Adc/AdcInterrupts container."/>   
                        <a:tst expr="../../../../AdcInterrupt/*[AdcInterruptSource='ADC1_COCO']/AdcInterruptEnable = 'false' and (.='ADC1') and (../AdcTransferType = 'ADC_INTERRUPT') and (count(../AdcGroup/*[AdcWithoutInterrupts='false']) > 0 ) "
                               true="This Unit has configured some Groups that need to use interrupts, so the associated End of Conversion interrupt must be enabled in Adc/AdcInterrupts container."/>
                      </a:da>
                    </v:var>
                    
                  <!-- AdcLogicalUnitId -->
                    <v:var name="AdcLogicalUnitId" type="INTEGER">
                      <a:a name="DESC"> 
                        <a:v><![CDATA[EN:<html><p>Specifies the Logical id of the Hardware Unit.</p></html>]]></a:v>
                      </a:a>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="NXP"/>
                      <a:a name="LABEL" value="Adc Logical Unit Id"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" value="ECUC:f8f69c4d-d49e-4c7f-8651-5f7cfc5e3533"/>
                      <a:da name="DEFAULT" type="XPath" expr="node:fallback(node:current()/../@index, '0')"/>
                      <a:da name="RANGE" type="XPath">
                       <a:tst expr="(. &gt;= 0) and (. &lt; num:i(count(node:current()/../../*)))"
                       false="Value out of range: must be in range 0 to N-1 (N is number of configured units). Use the Calc button to calculate correct default value."/>
                       <a:tst expr="text:uniq(../../*/AdcLogicalUnitId, .)"
                       false="Duplicated value, AdcLogicalUnitId must be unique across all units. Use the Calc button to calculate correct default value."/>
                      </a:da>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=1"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                    
                    <!-- AdcVoltageReferenceSelection -->
                    <v:var name="AdcVoltageReferenceSelection" type="ENUMERATION">
                      <a:a name="DESC">
                           <a:v><![CDATA[EN:<html><p>Selects the voltage reference source used for conversions. Refer to the chip configuration chapter's ADC section for details of these field definitions for this chip.
                                <ul>
                                <li>VREFH_VREFL        - Selects VREFH/VREFL as reference voltage.</li>
                                <li>VALTH_VREFL        - Selects VALTH/VREFL as reference voltage.</li>
                                </ul>.</p></html>]]></a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="NXP"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="LABEL" value="Adc Voltage Reference Selection"/>
                      <a:a name="UUID" value="ECUC:79dd4a50-6512-495e-bfbd-0fb3e3ca1e38"/>
                      <a:da name="DEFAULT" value="VREFH_VREFL"/>
                      <a:da name="RANGE">
                          <a:v>VREFH_VREFL</a:v>
                          <a:v>VALTH_VREFL</a:v>
                      </a:da>
                    </v:var>
                    
                    <!-- ADC088_Conf -->
                    <!-- AdcPrescale -->
                    <v:var name="AdcPrescale" type="INTEGER">
                      <a:a name="DESC"> 
                           <a:v><![CDATA[EN:<html><p>Optional ADC module specific clock prescale factor, if supported by hardware. The prescaler Value is not used in this implementation.</p></html>]]></a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                      <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Adc Prescaler Value"/>
                      <a:a name="OPTIONAL" value="true"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" value="ECUC:b2a66eb5-55c7-4a1a-abe8-d43a584aa06e"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="READONLY" value="true"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=65535"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                    
                  <!-- AdcResolution -->
                  <v:var name="AdcResolution" type="ENUMERATION">
                    <a:a name="DESC">
                         <a:v><![CDATA[EN:<html><p>Used to set the ADC resolution mode.
                              <ul>
                              <li>BITS_8           - 8-bit conversion.</li>
                              <li>BITS_10          - 10-bit conversion.</li>
                              <li>BITS_12          - 12-bit conversion.</li>
                              </ul>.</p></html>]]></a:v>
                    </a:a>
                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="NXP"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="LABEL" value="Adc Resolution"/>
                    <a:a name="UUID" value="ECUC:2b4de5da-3319-4745-bf24-fc936c3f68b7"/>
                    <a:da name="DEFAULT" value="BITS_12"/>
                    <a:da name="RANGE">
                        <a:v>BITS_8</a:v>
                        <a:v>BITS_10</a:v>
                        <a:v>BITS_12</a:v>
                    </a:da>
                  </v:var>
                    
                    <v:var name="AdcOffsetCorrectionValue" type="INTEGER">
                      <a:a name="DESC"> 
                           <a:v><![CDATA[EN:<html><p>Value to be written in the ADC_OFS(Offset correction value register). This value will be added with the converted result value to generate final result to be loaded into ADC_Rn.</p></html>]]></a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Adc Offset Correction Value"/>
                      <a:a name="ORIGIN" value="NXP"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" value="ECUC:523483fb-e236-440b-9760-495161f29ad3"/>
                      <a:da name="DEFAULT" value="0"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=255"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                    
                      <v:ctr name="AdcPdbSettings" type="IDENTIFIABLE">
                        <a:a name ="DESC">
                        <a:v>
                            <![CDATA[<html><p> Confiugration for the PDB unit associated with this Adc hardware unit. </p></html>]]></a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c6e63e5"/>
                        <a:a name="OPTIONAL" value="true"/>
                         
                          <!-- AdcPdbPrescalerDividerSelect -->
                          <v:var name="AdcPdbPrescalerDividerSelect" type="INTEGER">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Determines the prescaler used for the PDB counter. 
                                      <ul>
                                      <li>0        - Counting uses the peripheral clock divided by multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>1        - Counting uses the peripheral clock divided by twice of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>2        - Counting uses the peripheral clock divided by four of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>3        - Counting uses the peripheral clock divided by eight of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>4        - Counting uses the peripheral clock divided by 16 times of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>5        - Counting uses the peripheral clock divided by 32 times of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>6        - Counting uses the peripheral clock divided by 64 times of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      <li>7        - Counting uses the peripheral clock divided by 128 times of the multiplication factor selected by AdcPdbMultiplicationFactorSelect.</li>
                                      </ul>.</p></html>]]></a:v>
                          </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="Adc Pdb Prescaler Divider Select"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:f1f0591f-5cc8-4ed5-be66-b24399ffed4f"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=7"/>
                                <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>

                          <!-- AdcPdbMultiplicationFactorSelect -->
                          <v:var name="AdcPdbMultiplicationFactorSelect" type="INTEGER">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Selects the multiplication factor of the prescaler divider for the counter clock of the associated PDB unit. 
                                      <ul>
                                      <li>0           - Multiplication factor is 1.</li>
                                      <li>1           - Multiplication factor is 10.</li>
                                      <li>2           - Multiplication factor is 20.</li>
                                      <li>3           - Multiplication factor is 40.</li>
                                      </ul>.</p></html>]]></a:v>
                          </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="LABEL" value="Adc Pdb Multiplication Factor Select for Prescaler"/>
                            <a:a name="UUID" value="ECUC:09a81631-53de-45eb-a71f-98a42f687942"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=3"/>
                                <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          
                          <!-- AdcPdbChannelSequenceErrorEnable -->
                          <v:var name="AdcPdbChannelSequenceErrorEnable" type="BOOLEAN">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Enables the PDB sequence error interrupt. When this field is set, any of the PDB channel sequence error flags generates a PDB sequence error interrupt.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="PDB Sequence Error Interrupt Enable"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:8fd361db-6ed5-41d7-9ecb-b2046cf3f994"/>
                            <a:da name="DEFAULT" value="false"/>
                          </v:var>
                          
                          <!-- ADC085, ADC084 -->
                          <!-- AdcPdbErrorNotification -->
                          <v:var name="AdcPdbErrorNotification" type="FUNCTION-NAME">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Callback function for PDB channel sequence error. This function pointer is called everytime when PDB channel sequence error occurred.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="PDB Sequence Error Notification"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:45315cb5-e0ed-4c8c-b013-4f21012be2c3"/>
                            <a:da name="DEFAULT" value="NULL_PTR"/>
                            <a:a name="EDITABLE" type="XPath">
                              <a:tst expr="../AdcPdbChannelSequenceErrorEnable = 'true'"/>
                            </a:a>
                          </v:var>                          
                    </v:ctr>
                    
                    <v:ctr name="AdcNormalConversionTimings" type="IDENTIFIABLE">
                      <a:a name ="DESC">
                      <a:v>
                          <![CDATA[<html><p> Selects Normal values used for programming clock frequency, conversion timing and hardwre averaging used at initialization and also by Adc_SetClockMode API when it is called with parameter ADC_NORMAL. </p></html>]]></a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                      <a:a name="EDITABLE" type="XPath">
                          <a:tst expr="(node:fallback(../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                      </a:a>
                      <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c6e63e4"/>
                      <a:a name="OPTIONAL" value="true"/>
                      
                      <!-- AdcHardwareAverageEnable -->
                      <v:var name="AdcHardwareAverageEnable" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v><![CDATA[EN:<html><p>Enables the hardware average function of the ADC.</p></html>]]></a:v>
                        </a:a>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS"
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Adc Hardware Average Enable"/>
                        <a:a name="ORIGIN" value="NXP"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" value="ECUC:8fd361db-6ed5-41d7-9ecb-b2046cf3f993"/>
                        <a:da name="DEFAULT" value="false"/>
                          <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                          </a:a>
                      </v:var>
                      
                        <!-- AdcHardwareAverageSelect -->
                        <v:var name="AdcHardwareAverageSelect" type="ENUMERATION">
                          <a:a name="DESC">
                               <a:v><![CDATA[EN:<html><p>Determines how many ADC conversions will be averaged to create the ADC average result. This functionality is activated when ADCx_SC3[AVGE] = 1.
                                    <ul>
                                    <li>SAMPLES_4        - 4 samples averaged.</li>
                                    <li>SAMPLES_8        - 8 samples averaged.</li>
                                    <li>SAMPLES_16       - 16 samples averaged.</li>
                                    <li>SAMPLES_32       - 32 samples averaged.</li>
                                    </ul>.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="LABEL" value="Adc Hardware Average Select"/>
                          <a:a name="UUID" value="ECUC:f1f0591f-5cc8-4ed5-be66-b24399ffed3f"/>
                          <a:da name="DEFAULT" value="SAMPLES_4"/>
                          <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../AdcHardwareAverageEnable,'false') = 'true')
                                    and (node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                          </a:a>
                          <a:da name="RANGE">
                              <a:v>SAMPLES_4</a:v>
                              <a:v>SAMPLES_8</a:v>
                              <a:v>SAMPLES_16</a:v>
                              <a:v>SAMPLES_32</a:v>
                          </a:da>
                        </v:var>

                      <!-- AdcSampleTimeDuration -->
                       <v:var name="AdcSampleTimeDuration" type="INTEGER">
                          <a:a name="DESC"> 
                               <a:v><![CDATA[EN:<html><p>Selects a sample time of 2 to 256 ADCK clock cycles. The value written to this register is the desired sample time minus 1.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Sample Time Duration"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:6153a38d-da3e-4d9e-8564-f8fe85f7b2b4"/>
                          <a:da name="DEFAULT" value="2"/>
                            <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                            </a:a>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=256"/>
                            <a:tst expr="&gt;=2"/>
                          </a:da>
                       </v:var>

                        <!-- AdcClockDivideSelect -->
                        <v:var name="AdcClockDivideSelect" type="ENUMERATION">
                          <a:a name="DESC">
                               <a:v><![CDATA[EN:<html><p>Selects the divide ratio used by the ADC to generate the internal clock ADCK.
                                    <ul>
                                    <li>DIV_NONE        - Input clock.</li>
                                    <li>DIV_2           - Input clock / 2.</li>
                                    <li>DIV_4           - Input clock / 4.</li>
                                    <li>DIV_8           - Input clock / 8.</li>
                                    </ul>.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="LABEL" value="Adc Clock Divide Select"/>
                          <a:a name="UUID" value="ECUC:09a81631-53de-45eb-a71f-98a42f689764"/>
                          <a:da name="DEFAULT" value="DIV_NONE"/>
                            <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                            </a:a>
                          <a:da name="RANGE">
                              <a:v>DIV_NONE</a:v>
                              <a:v>DIV_2</a:v>
                              <a:v>DIV_4</a:v>
                              <a:v>DIV_8</a:v>
                          </a:da>
                        </v:var>
                  </v:ctr>
                  
                    <v:ctr name="AdcAlternateConversionTimings" type="IDENTIFIABLE">
                      <a:a name ="DESC">
                      <a:v>
                          <![CDATA[<html><p> Selects Alternate values used for programming clock frequency, conversion timing and hardwre averaging used  by Adc_SetClockMode API when it is called with parameter ADC_ALTERNATE. This is available when AdcEnableDualClockMode is enabled. </p></html>]]></a:v>
                      </a:a>
                      <a:a name="EDITABLE" type="XPath">
                          <a:tst expr="(node:fallback(../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true') and (node:fallback(../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                      <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c6e6342"/>
                      <a:a name="OPTIONAL" value="true"/>
                      
                      <!-- AdcHardwareAverageEnableAlternate -->
                      <v:var name="AdcHardwareAverageEnableAlternate" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v><![CDATA[EN:<html><p>Alternate configuration: Enables the hardware average function of the ADC.</p></html>]]></a:v>
                        </a:a>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS"
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Adc Hardware Average Enable"/>
                        <a:a name="ORIGIN" value="NXP"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" value="ECUC:8fd361db-6ed5-41d7-9ecb-b2046cf3f942"/>
                        <a:da name="DEFAULT" value="false"/>
                          <a:da name="EDITABLE" type="XPath" expr="node:fallback(../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true' and
                          (node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                      </v:var>

                      
                        <!-- AdcHardwareAverageSelectAlternate -->
                        <v:var name="AdcHardwareAverageSelectAlternate" type="ENUMERATION">
                          <a:a name="DESC">
                               <a:v><![CDATA[EN:<html><p>Alternate configuration: Determines how many ADC conversions will be averaged to create the ADC average result. This functionality is activated when ADCx_SC3[AVGE] = 1.
                                    <ul>
                                    <li>SAMPLES_4        - 4 samples averaged.</li>
                                    <li>SAMPLES_8        - 8 samples averaged.</li>
                                    <li>SAMPLES_16       - 16 samples averaged.</li>
                                    <li>SAMPLES_32       - 32 samples averaged.</li>
                                    </ul>.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="LABEL" value="Adc Hardware Average Select"/>
                          <a:a name="UUID" value="ECUC:f1f0591f-5cc8-4ed5-be66-b24399ffed42"/>
                          <a:da name="DEFAULT" value="SAMPLES_4"/>
                          <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../AdcHardwareAverageEnableAlternate,'true') = 'true') and (node:fallback(../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true') and
                                (node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                          </a:a>
                          <a:da name="RANGE">
                              <a:v>SAMPLES_4</a:v>
                              <a:v>SAMPLES_8</a:v>
                              <a:v>SAMPLES_16</a:v>
                              <a:v>SAMPLES_32</a:v>
                          </a:da>
                        </v:var>

                      <!-- AdcSampleTimeDurationAlternate -->
                       <v:var name="AdcSampleTimeDurationAlternate" type="INTEGER">
                          <a:a name="DESC"> 
                               <a:v><![CDATA[EN:<html><p>Alternate configuration: Selects a sample time of 2 to 256 ADCK clock cycles. The value written to this register is the desired sample time minus 1..</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Sample Time Duration"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:6153a38d-da3e-4d9e-8564-f8fe85f7b242"/>
                          <a:da name="DEFAULT" value="2"/>
                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true') and
                            (node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=256"/>
                            <a:tst expr="&gt;=2"/>
                          </a:da>
                       </v:var>
                      
                        <!-- AdcClockDivideSelectAlternate -->
                        <v:var name="AdcClockDivideSelectAlternate" type="ENUMERATION">
                          <a:a name="DESC">
                               <a:v><![CDATA[EN:<html><p>Alternate configuration: Selects the divide ratio used by the ADC to generate the internal clock ADCK.
                                    <ul>
                                    <li>DIV_NONE        - Input clock.</li>
                                    <li>DIV_2           - Input clock / 2.</li>
                                    <li>DIV_4           - Input clock / 4.</li>
                                    <li>DIV_8           - Input clock / 8.</li>
                                    </ul>.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="LABEL" value="Adc Clock Divide Select"/>
                          <a:a name="UUID" value="ECUC:09a81631-53de-45eb-a71f-98a42f689742"/>
                          <a:da name="DEFAULT" value="DIV_NONE"/>
                            <a:da name="EDITABLE" type="XPath" expr="(node:fallback(../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true') and
                            (node:fallback(../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'true')"/>
                          <a:da name="RANGE">
                              <a:v>DIV_NONE</a:v>
                              <a:v>DIV_2</a:v>
                              <a:v>DIV_4</a:v>
                              <a:v>DIV_8</a:v>
                          </a:da>
                        </v:var>

                  </v:ctr>    
                    
                  <!-- AdcChannel Big container -->
                  <!-- /** @implements AdcChannel_Object */ -->
                    <v:lst name="AdcChannel" type="MAP">
                    <!-- ADC091 -->
                      <a:da name="MIN" value="1"/>
                      <v:ctr name="AdcChannel" type="IDENTIFIABLE">
                         <a:a name="DESC">
                          <a:v><![CDATA[EN:<html><p>This container contains the channel configuration (parameters) depending on the hardware capability.</p></html>]]></a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="UUID" value="ECUC:b35cc61d-33dd-4a71-b54e-d558f50487d8"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="text:uniq(../../../*/AdcChannel/*/@name, @name)" false="Duplicate AdcChannelNames, Channel Symbolic names must be unique across HWUnits."/>
                        </a:da>
                        
                        <!-- AdcLogicalChannelId -->
                        <v:var name="AdcLogicalChannelId" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>This is the logical Id of the ADC channel.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Logical Channel ID"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:e2e71142-5b64-4236-b15f-9b880ca8325c"/>
                          <a:da name="DEFAULT" type="XPath" expr="node:fallback(node:current()/../@index, '0')"/>
                          <a:da name="RANGE" type="XPath">
                           <a:tst expr="(. &gt;= 0) and (. &lt; num:i(count(node:current()/../../*)))"
                           false="Value out of range: must be in range 0 to N-1 (N is number of configured channels). Use the Calc button to calculate correct default value."/>
                           <a:tst expr="text:uniq(../../*/AdcLogicalChannelId, .)"
                           false="Duplicated value, AdcLogicalChannelId must be unique across all channels. Use the Calc button to calculate correct default value."/>
                          </a:da>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=1024"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
                        
                        <!-- ADC392_Conf -->
                        <!-- AdcChannelId -->
                        <v:var name="AdcChannelId" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>This parameter defines the assignment of the channel to the physical ADC hardware channel. Note: Range of the ADC Channels depends on the selected package.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Hardware Channel Id"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:317b7bf3-0344-4df9-97e8-7afa653f18ea"/>
                          <a:da name="DEFAULT" type="XPath" expr="ecu:list(concat('Adc.AdcConfigSet.AdcHwUnit',substring-after(string(node:fallback(../../../AdcHwUnitId,'ADC0')), 'ADC'),'.AdcChannel.AdcChannelId'))[position()-1=node:fallback(node:current()/../@index,0)]"></a:da>
                          <a:da name="RANGE" type="XPath" expr="ecu:list(concat('Adc.AdcConfigSet.AdcHwUnit',substring-after(string(node:fallback(../../../AdcHwUnitId,'')), 'ADC'),'.AdcChannel.AdcChannelId'))"/>
                          <a:da name="INVALID" type="XPath">
                              <a:tst expr="text:uniq(../../*/AdcChannelId, .)" false="Duplicate physical channel"/>
                          </a:da>
                        </v:var>

                        <!-- ADC453_Conf, ADC445 -->
                        <!-- AdcChannelLimitCheck -->
                        <v:var name="AdcChannelLimitCheck" type="BOOLEAN">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Enables or disables limit checking for an ADC channel.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Limit Check"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:3eda8650-1827-41d0-b88b-9bf861cbe699"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="EDITABLE" type="XPath" expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true')"/>
                          <a:a name="INVALID" type="XPath">
                             <a:tst expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'false' and .='true')" true ="AdcChannelLimitCheck must be disabled when Adc/AdcGeneral/AdcEnableLimitCheck is false."/>
                             <a:tst expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true' and .='true' and (not(node:exists(../AdcChannelLowLimit))))" true ="if Adc/AdcGeneral/AdcChannelLimitCheck is enabled, AdcChannelLowLimit must be configured."/>
                             <a:tst expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true' and .='true' and (not(node:exists(../AdcChannelHighLimit))))" true ="if Adc/AdcGeneral/AdcChannelLimitCheck is enabled, AdcChannelHighLimit must be configured."/>
                             <a:tst expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true' and .='true' and (not(node:exists(../AdcChannelRangeSelect))))" true ="if Adc/AdcGeneral/AdcChannelLimitCheck is enabled, AdcChannelRangeSelect must be configured."/>
                          </a:a>
                        </v:var>

                        <!-- ADC455_Conf -->
                         <!-- AdcChannelHighLimit -->
                        <v:var name="AdcChannelHighLimit" type="INTEGER">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>High limit - used for limit checking.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel High Limit"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:b75a338d-b551-4cee-9c6c-119cce48741f"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="EDITABLE" type="XPath" expr="node:exists(../AdcChannelLimitCheck) and (../AdcChannelLimitCheck = 'true') and (../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true')"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=9223372036854775807"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                          <a:da name="RANGE" type="XPath">
                            <a:tst expr="node:exists(../AdcChannelLowLimit) and (. &lt; ../AdcChannelLowLimit) and node:exists(../AdcChannelLimitCheck) and (../AdcChannelLimitCheck = 'true') and (../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true')"
                              true="Adc Channel High Limit value should be greater or equal than Adc Channel Low Limit value."/>
                            <a:tst expr=". &gt; 65535"
                              true="AdcMaxChannelResolution is 12. To reduce code size and memory cost, driver uses uint16 type for this value. Then to avoid overflow of uint16, AdcChannelHighLimit should NOT configure greater than 65535."/>
                          </a:da>
                        </v:var>

                        <!-- ADC454_Conf -->
                        <!-- AdcChannelLowLimit -->
                        <v:var name="AdcChannelLowLimit" type="INTEGER">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Low limit - used for limit checking.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Low Limit"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:dbe29c23-8268-4b84-8fd0-7d7da542b26f"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="EDITABLE" type="XPath" expr="node:exists(../AdcChannelLimitCheck) and (../AdcChannelLimitCheck = 'true') and (../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true')"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=9223372036854775807"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                          <a:da name="RANGE" type="XPath">
                          <a:tst expr="(node:exists(../AdcChannelHighLimit) and (. &lt;= ../AdcChannelHighLimit))"
                          false="Adc Channel Low Limit value should be less or equal than Adc Channel High Limit value."/>
                          </a:da>
                        </v:var>

                        <!-- ADC456_Conf -->
                        <!-- AdcChannelRangeSelect -->
                        <v:var name="AdcChannelRangeSelect" type="ENUMERATION">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>In case of active limit checking: defines which conversion values are taken into account related to the boarders defined with AdcChannelLowLimit and AdcChannelHighLimit.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Range Select"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:8fac8fec-a21e-48b1-ba61-8fd23e929671"/>
                          <a:da name="DEFAULT" value="ADC_RANGE_ALWAYS"/>
                          <a:da name="EDITABLE" type="XPath" expr="node:exists(../AdcChannelLimitCheck) and (../AdcChannelLimitCheck = 'true') and (../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true')"/>
                          <a:da name="RANGE">
                            <a:v>ADC_RANGE_ALWAYS</a:v>
                            <a:v>ADC_RANGE_BETWEEN</a:v>
                            <a:v>ADC_RANGE_NOT_BETWEEN</a:v>
                            <a:v>ADC_RANGE_NOT_OVER_HIGH</a:v>
                            <a:v>ADC_RANGE_NOT_UNDER_LOW</a:v>
                            <a:v>ADC_RANGE_OVER_HIGH</a:v>
                            <a:v>ADC_RANGE_UNDER_LOW</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC011_Conf -->
                         <!-- AdcChannelConvTime -->
                        <v:var name="AdcChannelConvTime" type="INTEGER">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Configuration of conversion time, i.e. the time during which the analogue value is converted into digital representation, (in clock cycles) for each channel, if supported by hardware.
                                                        This parameter is not used by the current implementation.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/> 
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Conversion Time"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:32307aeb-4ea4-41cc-8af6-4a75ae619ada"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=18446744073709551615"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
 
                        <!-- ADC089_Conf -->
                       <!-- AdcChannelRefVoltsrcHigh -->
                        <v:var name="AdcChannelRefVoltsrcHigh" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Upper reference voltage source for each channel.This parameter is not used by the current implementation.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc High Reference Voltage"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:2fedc0c6-9f30-438d-8976-01eb0dbd5b10"/>
                          <a:da name="DEFAULT" value="UPPER_REF_VOLT_0"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="RANGE">
                            <a:v>UPPER_REF_VOLT_0</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC023_Conf -->
                        <!-- AdcChannelRefVoltsrcLow -->
                        <v:var name="AdcChannelRefVoltsrcLow" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Lower reference voltage source for each channel.This parameter is not used by the current implementation.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Low Reference Voltage"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:2898ce2b-84ff-4d2c-a15e-207dec190b29"/>
                          <a:da name="DEFAULT" value="LOWER_REF_VOLT_0"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="RANGE">
                            <a:v>LOWER_REF_VOLT_0</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC019_Conf -->
                        <!-- AdcChannelResolution -->
                        <v:var name="AdcChannelResolution" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Channel Resolution in bits of converted value. This parameter is not used by the current implementation.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Resolution"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:522d5394-ef68-4867-b7ef-04182a7ebdeb"/>
                          <a:da name="DEFAULT" value="12"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=63"/>
                            <a:tst expr="&gt;=1"/>
                          </a:da>
                        </v:var>
                        
                        <!-- ADC290_Conf -->
                        <!-- AdcChannelSampTime -->
                        <v:var name="AdcChannelSampTime" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Configuration of sampling time, i.e. the time during which the value is sampled, (in clock cycles) for each channel, if supported by hardware. This parameter is not used by the current implementation.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Channel Sampling time"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:1055276f-d773-4be9-9e84-6f3c6cfa2583"/>
                          <a:da name="DEFAULT" value="8"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&gt;=8"/>
                            <a:tst expr="&lt;=254"/>
                          </a:da>
                        </v:var>
                       </v:ctr>
                    </v:lst>

                    <!-- ADC090 -->
                    <!-- AdcGroup Big container -->
                    <!-- /** @implements AdcGroup_Object */ -->
                    <v:lst name="AdcGroup" type="MAP">
                      <a:da name="MIN" value="1"/>

                      <!-- ADC028_Conf -->
                      <!-- AdcGroup -->
                      <v:ctr name="AdcGroup" type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v><![CDATA[EN:<html><p>This container contains the Group configuration (parameters).</p></html>]]></a:v>
                        </a:a>
                        <a:a name="UUID" value="ECUC:2f12f3a1-5619-479c-9669-78ab54302d68"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS"  type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="text:uniq(../../../*/AdcGroup/*/@name, @name)" false="Duplicate AdcGroupNames, Group Symbolic names must be unique across HWUnits."/>
                        </a:da>                         
                        
                        <!-- ADC317_Conf -->
                        <!-- AdcGroupAccessMode -->
                        <v:var name="AdcGroupAccessMode" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Type of access mode to group conversion results.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Access Mode"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:37ca397d-7c53-45a5-9164-11c9677e1e67"/>
                          <a:da name="DEFAULT" value="ADC_ACCESS_MODE_SINGLE"/>
                          <a:da name="RANGE">
                            <a:v>ADC_ACCESS_MODE_SINGLE</a:v>
                            <a:v>ADC_ACCESS_MODE_STREAMING</a:v>
                          </a:da>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="((../AdcWithoutInterrupts='true') and (.='ADC_ACCESS_MODE_STREAMING'))"
                            true="Streaming access mode is not supported when AdcWithoutInterrupts is enabled."/>
                            <a:tst expr="((../AdcGroupAccessMode='ADC_ACCESS_MODE_STREAMING') and (../AdcGroupTriggSrc='ADC_TRIGG_SRC_SW') and (../AdcGroupConversionMode='ADC_CONV_MODE_ONESHOT'))"
                            true="Group cannot be configured with streaming access mode when it is Software triggered in one shot mode."/>
                            <a:tst expr="((node:fallback(../../../../../../AutosarExt/AdcOptimizeOneShotHwTriggerConversions,'false') = 'true') and (.='ADC_ACCESS_MODE_STREAMING'))"
                              true="Streaming access mode cannot be configured if Adc/AutosarExt/AdcOptimizeOneShotHwTriggerConversions is enabled."/>
                          </a:da>
                        </v:var>
                        
                        <!-- ADC380, ADC381 , ADC397_Conf -->
                        <!-- AdcGroupConversionMode -->
                        <!-- /** @implements AdcGroupConversionMode_Object */ -->
                        <v:var name="AdcGroupConversionMode" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Type of Conversion mode of the channel group.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Conversion Mode"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:c8ed7d50-7089-4825-a053-867a74f3b0be"/>
                          <a:da name="DEFAULT" value="ADC_CONV_MODE_ONESHOT"/>
                          <a:da name="RANGE">
                            <a:v>ADC_CONV_MODE_CONTINUOUS</a:v>
                            <a:v>ADC_CONV_MODE_ONESHOT</a:v>
                          </a:da>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="((../AdcGroupTriggSrc='ADC_TRIGG_SRC_HW') and (../AdcGroupConversionMode='ADC_CONV_MODE_CONTINUOUS'))"
                            true="Group cannot be configured for continuous conversion mode when it is hardware triggered."/>
                          </a:da>
                        </v:var>

                        <!-- AdcGroupConversionType -->
                        <v:var name="AdcGroupConversionType" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Normal or Injected conversion type. Only Normal type is supported.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Conversion Type"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:fa375292-da74-4f91-9707-07c07b86da76"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="DEFAULT" value="ADC_CONV_TYPE_NORMAL"/>
                          <a:da name="RANGE">
                            <a:v>ADC_CONV_TYPE_NORMAL</a:v>
                            <a:v>ADC_CONV_TYPE_INJECTED</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC398_Conf -->
                        <!-- AdcGroupId -->
                        <v:var name="AdcGroupId" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Numeric ID of the group. This parameter is the symbolic name to be used on the API. 
                                                      This symbolic name allows accessing Channel Group data. This value will be assigned to the symbolic name derived of the AdcGroup container shortName.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Id"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <!-- ADC099 -->
                          <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                          <a:a name="UUID" value="ECUC:226243e9-d2b3-47bd-9d61-34a7aeaf5872"/>
                          <a:da name="DEFAULT" type="XPath" expr="node:fallback(node:current()/../@index,'0')"/>
                          <a:da name="RANGE" type="XPath">
                            <a:tst expr="(node:fallback(.,0) &gt;= 0) and (node:fallback(.,0) &lt; num:i(count(node:fallback(../../../../*/AdcGroup/*,1))))"
                            false="Value out of range: must be in range 0 to N-1 (N is number of configured groups). Use the Calc button to calculate correct default value."/>
                            <a:tst expr="text:uniq(node:fallback(../../../../*/AdcGroup/*/AdcGroupId,text:split('0') ),node:fallback(.,1))"
                            false="Duplicate AdcGroupId, GroupIds must be unique across HWUnits."/>
                          </a:da>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="../../../../../../AdcGeneral/AdcPriorityImplementation = 'ADC_PRIORITY_HW_SW' and not(node:exists(../AdcGroupPriority))"
                            true="If AdcGeneral/AdcPriorityImplementation is set as ADC_PRIORITY_HW_SW, AdcGroupPriority must be configured for this Group."/>
                          </a:da>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=1023"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>

                        <!-- ADC288, ADC312 , ADC287_Conf -->
                        <!-- AdcGroupPriority -->
                        <!-- /** @implements AdcGroupPriority_Object*/ -->
                        <v:var name="AdcGroupPriority" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Priority level of the AdcGroup. This item is ignored if Adc/AdcGeneral/AdcPriorityImplementation is defined to ADC_PRIORITY_NONE.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Priority"/>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:bd245684-be51-45b7-a01d-b26dbfd1c614"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:a name="EDITABLE" type="XPath">
                            <a:tst expr="../../../../../../AdcGeneral/AdcPriorityImplementation != 'ADC_PRIORITY_NONE'"/>
                          </a:a>
                          <!-- ADC289 -->
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=255"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                          <a:da name="RANGE" type="XPath"> 
                            <a:tst expr="(node:fallback(../AdcGroupConversionType, 'ADC_CONV_TYPE_NORMAL') = 'ADC_CONV_TYPE_NORMAL') and 
                                         (node:fallback(../AdcGroupTriggSrc, 'ADC_TRIGG_SRC_SW') = 'ADC_TRIGG_SRC_SW') and 
                                         node:exists(node:fallback(../../../AdcGroup/*[AdcGroupTriggSrc='ADC_TRIGG_SRC_HW']/AdcGroupPriority, 0)) and 
                                         (node:fallback(.,0) &gt; (num:min(node:fallback(../../../AdcGroup/*[AdcGroupTriggSrc='ADC_TRIGG_SRC_HW']/AdcGroupPriority, 0))))"
                                   true="Normal SW Triggered Groups cannot have priority more than HW Triggered Groups"/>
                          </a:da>
                        </v:var>

                        <!-- ADC430 , ADC435_Conf-->
                        <!-- AdcGroupReplacement -->
                        <v:var name="AdcGroupReplacement" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Replacement mechanism used on ADC group level, if a group conversion is interrupted by a group which has a higher priority. It's fixed to Abort/Restart</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Group Replacement"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:926b1f79-884c-4349-b237-9d21d9414cb4"/>
                          <a:da name="DEFAULT" value="ADC_GROUP_REPL_ABORT_RESTART"/>
                          <a:da name="READONLY" value="true"/>
                          <a:da name="RANGE">
                            <a:v>ADC_GROUP_REPL_ABORT_RESTART</a:v>
                            <a:v>ADC_GROUP_REPL_SUSPEND_RESUME</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC356, ADC357, ADC279, ADC399_Conf -->
                        <!-- AdcGroupTriggSrc -->
                        <v:var name="AdcGroupTriggSrc" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Type of source event that starts a group conversion. It's possible to select Hw or Sw trigger.
                            In case of Hw trigger, the trigger source can be from the PDB. Only trigger sources from PDB is used by the current implementation. The trigger source connected to PDB can be configured from Mcl module.
                            </p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Trigger Source"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:5b40e836-50e2-40ed-abd9-9accfa0e0e2e"/>
                          <a:da name="DEFAULT" value="ADC_TRIGG_SRC_SW"/>
                          <a:a name="INVALID" type="XPath">
                            <a:tst expr="(.= 'ADC_TRIGG_SRC_HW') and (../AdcGroupConversionType = 'ADC_CONV_TYPE_NORMAL') and (../../../../../../AutosarExt/AdcUseHardwareNormalGroups ='false')"
                                   true="Using Hardware normal group must be globally enabled in Adc/AutosarExt/AdcUseHardwareNormalGroups before configuring Hardware Normal Groups for this HW unit."/>
                            <a:tst expr="((../../../../../../AdcGeneral/AdcHwTriggerApi = 'false') and (. = 'ADC_TRIGG_SRC_HW'))"
                                   true="Adc Hw Trigger API in AdcGeneral container is switched off! Cannot configure any groups in HW triggered mode!"/>
                            <a:tst expr="((../../../../../../AdcGeneral/AdcEnableStartStopGroupApi = 'false') and (. = 'ADC_TRIGG_SRC_SW'))"
                                   true="Adc_StartStopGroup API in AdcGeneral container is switched off! Cannot configure any groups in SW triggered mode!"/>
                            <a:tst expr="((node:fallback(../../../../../../AutosarExt/AdcOptimizeOneShotHwTriggerConversions,'false') = 'true') and (.='ADC_TRIGG_SRC_SW'))"
                                     true="Software triggered groups cannot be configured if Adc/AutosarExt/AdcOptimizeOneShotHwTriggerConversions is enabled."/>
                          </a:a>
                          <a:da name="RANGE">
                            <a:v>ADC_TRIGG_SRC_HW</a:v>
                            <a:v>ADC_TRIGG_SRC_SW</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC400_Conf -->
                        <!-- AdcHwTrigSignal -->
                        <v:var name="AdcHwTrigSignal" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Configures on which edge of the hardware trigger signal the driver should react, i.e. start the conversion.
                                 Note: Only ADC_HW_TRIG_RISING_EDGE is used by the current implementation.</p></html>]]>
                            </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Trigger Signal"/>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:fcfc7162-1a4e-45bb-82a1-e7e5a34b8988"/>
                          <a:da name="DEFAULT" value="ADC_HW_TRIG_RISING_EDGE"/>
                          <a:a name="EDITABLE" type="XPath">
                            <a:tst expr="(../../../../../../AdcGeneral/AdcHwTriggerApi = 'true') and (../AdcGroupTriggSrc = 'ADC_TRIGG_SRC_HW')"/>
                          </a:a>
                          <a:da name="RANGE">
                            <a:v>ADC_HW_TRIG_FALLING_EDGE</a:v>
                            <a:v>ADC_HW_TRIG_RISING_EDGE</a:v>
                          </a:da>
                        </v:var>

                        <!-- ADC401_Conf -->
                         <!-- AdcHwTrigTimer -->
                        <v:var name="AdcHwTrigTimer" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Reload value of the ADC module embedded timer. This parameter is not used by the current implementation</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="READONLY" value="true"/>
                          <a:a name="LABEL" value="Adc Group Trigger Timer"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:4468f2c1-a812-4212-9685-374ab383dfc0"/>
                          <a:da name="DEFAULT" value="50"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=18446744073709551615"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
                      
                        <!-- ADC402_Conf, ADC085, ADC084, ADC104, ADC082 -->
                        <!-- AdcNotification -->
                        <!-- /** @implements AdcNotification_Object */ -->
                        <v:var name="AdcNotification" type="FUNCTION-NAME">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Callback function for each group. This function pointer is called whenever the conversion of this group is completed.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="LABEL" value="Adc Group Notification"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:45315cb5-e0ed-4c8c-b013-4f21012be2c2"/>
                          <a:da name="DEFAULT" value="NULL_PTR"/>
                          <a:a name="EDITABLE" type="XPath">
                            <a:tst expr="../../../../../../AdcGeneral/AdcGrpNotifCapability = 'true'"/>
                          </a:a>
                        </v:var>

                        <!-- ADC085, ADC084 -->
                          <!-- AdcExtraNotification -->
                        <v:var name="AdcExtraNotification" type="FUNCTION-NAME">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Extra callback function for each group. This function pointer will be called at the beginning of the interrupt routine, before updating any HW registers or Group status.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                              type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Extra Notification"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:45315cb5-e0ed-4c8c-b013-4f21012be279"/>
                          <a:da name="DEFAULT" value="NULL_PTR"/>
                          <a:a name="EDITABLE" type="XPath">
                            <a:tst expr="(node:fallback(../../../../../../AutosarExt/AdcEnableInitialNotification,'false') = 'true')"/>
                          </a:a>
                        </v:var>
                        
                        <!-- ADC316_Conf -->
                        <!-- AdcStreamingBufferMode -->
                        <v:var name="AdcStreamingBufferMode" type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Configure streaming buffer as linear buffer 
                                                      (i.e. the ADC Driver stops the conversion as soon as the stream buffer is full) or as circular buffer (wraps around if the end of the stream buffer is reached).</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Streaming Buffer Mode"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:e4573ec1-91ae-426a-8573-b362cbe77351"/>
                          <a:da name="DEFAULT" value="ADC_STREAM_BUFFER_LINEAR"/>
                          <a:a name="EDITABLE" type="XPath">
                            <a:tst expr="../AdcGroupAccessMode = 'ADC_ACCESS_MODE_STREAMING'"/>
                          </a:a>
                          <a:a name="INVALID" type="XPath">
                            <a:tst expr="(../AdcGroupAccessMode = 'ADC_ACCESS_MODE_SINGLE' and .='ADC_STREAM_BUFFER_CIRCULAR')" true ="When AdcGroupAccessMode is Single Access, the AdcStreamingBufferMode must be Linear."/>
                          </a:a>
                          <a:da name="RANGE">
                            <a:v>ADC_STREAM_BUFFER_CIRCULAR</a:v>
                            <a:v>ADC_STREAM_BUFFER_LINEAR</a:v>
                          </a:da>
                        </v:var>

                        <!-- AdcEnableDoubleBuffering -->
                        <v:var name="AdcEnableDoubleBuffering" type="BOOLEAN">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>
                                          Enable/ Disable the Double Buffering feature for Adc group conversions. this Parameter can be configured only for groups configured with ADC_ACCESS_MODE_STREAMING Access Mode, and only if ADC_DMA is configured as the transfer method for the Adc Unit.
                                          When this parameter is Disabled, normal functionlaity shall be executed.
                                          Note: This is an Implementation Specific Parameter. </p></html>]]>
                            </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS"
                              type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Enable Double Buffering"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:3ca7b97c-36e2-4d2a-a199-37c07804cb65"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="READONLY" value="false"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(.='true') and (node:fallback(../AdcGroupAccessMode, 'ADC_ACCESS_MODE_SINGLE') = 'ADC_ACCESS_MODE_SINGLE')" true="Only groups configured with ADC_ACCESS_MODE_STREAMING Access Mode can have enabled the Double Buffering feature!"/>
                            <a:tst expr="((.='true') and (node:fallback(../../../AdcTransferType, 'ADC_INTERRUPT') = 'ADC_INTERRUPT'))"
                                   true="AdcEnableDoubleBuffering can be enabled only if ADC_DMA transfer is configured."/>
                            <a:tst expr="((.='true') and (node:fallback(../../../../../../AutosarExt/AdcEnableDoubleBufferingOptimization,'false') = 'false'))"
                                     true="AdcEnableDoubleBuffering can be enabled only if AdcEnableDoubleBufferingOptimization is enabled."/>
                          </a:da>
                          <a:da name="EDITABLE" type="XPath" expr="node:fallback(../../../../../../AutosarExt/AdcEnableDoubleBufferingOptimization,'false') = 'true'"/>
                        </v:var>
                        
                        <!-- AdcEnableHalfInterrupt -->
                        <v:var name="AdcEnableHalfInterrupt" type="BOOLEAN">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>
                                          Enable/ Disable the interrupt when half sample complete for double bufferring feature. Double buffering must be enable for configure this feature. </p></html>]]>
                            </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS"
                              type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Enable Half Interrupt"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:c08c3abb-86b5-4f8f-be15-672bb9fdf90c"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="READONLY" value="false"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(.='true') and (node:fallback(../AdcEnableDoubleBuffering, '0') = 'false')" true="Double buffering must be enable for configure this feature"/>
                          </a:da>
                          <a:da name="EDITABLE" type="XPath" expr="node:fallback(../AdcEnableDoubleBuffering, '0') = 'true'"/>
                        </v:var>

                        <!-- ADC292_Conf -->
                        <!-- AdcStreamingNumSamples -->
                        <v:var name="AdcStreamingNumSamples" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Number of ADC values to be acquired per channel in streaming access mode.
                                                      Note: In single access mode this parameter assumes value 1 since only one sample per channel is processed.</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Streaming Number Samples"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:9a91442b-1277-4d7d-8059-624a47f1844c"/>
                          <a:da name="DEFAULT" value="1"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=1024"/>
                            <a:tst expr="&gt;=1"/>
                          </a:da>
                          <a:da name="RANGE" type="XPath">
                            <a:tst expr="../AdcGroupAccessMode = 'ADC_ACCESS_MODE_SINGLE' and ../AdcStreamingNumSamples != 1" true="AdcStreamingNumSamples must be 1 for ADC_ACCESS_MODE_SINGLE."/>
                          </a:da>
                        </v:var>

                        <!-- AdcWithoutInterrupts -->
                        <!-- /** @implements AdcWithoutInterrupts_Object */ -->
                        <v:var name="AdcWithoutInterrupts" type="BOOLEAN">
                          <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>
                                            Enable/ Disable the occuring of ADC data transferring from ADC data registers Rn to user-defined buffers by using ADC Interrupt or DMA transferring.
                                            - When this parameter is enabled:
                                            A) Application can read the results by calling Adc_ReadGroup().
                                            B) The result buffer is no longer to be used to read the results as the results will be directly read from HW registers.
                                            C) This feature can be enabled only for ADC groups that consist of only 1 channel.
                                            - When this parameter is Disabled:
                                            Normal functionlaity shall be executed.
                                            Note: This is an Implementation Specific Parameter.</p></html>]]>
                              </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Without Interrupts"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:3ca7b97c-36e2-4d2a-a199-37c07804cb6a"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="INVALID" type="XPath">
                              <a:tst expr="(.='true') and (count(../AdcGroupDefinition/*) &gt; ecu:get(&apos;Adc.AdcConfigSet.AdcScRegisterUsed&apos;))" true="Only groups with little than N ADC channels can be configured without interrupts!. N is the number of SC registers available for each platform"/>
                              <a:tst expr="(.='true') and (../AdcGroupConversionMode = 'ADC_CONV_MODE_CONTINUOUS')and (node:fallback(../../../../../../AutosarExt/AdcContinuousWithoutInterrupt,'false') = 'false')" 
                              true="AdcContinuousWithoutInterrupt must be enabled to configure group continous without interrupt"/>
                          </a:da>                            
                         </v:var>

                        <!-- AdcGroupInBacktoBackMode -->
                        <v:var name="AdcGroupInBacktoBackMode" type="BOOLEAN">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>
                                  Enable/ Disable the channel conversions occuring in Back to Back mode.
                                  The PDB hardware unit is used to initiate individual channel conversions that are required for each group conversion, with one PDB pretrigger controlling the timing of each ADC channel conversion.
                                  When AdcGroupInBacktoBackMode is enabled, the PDB pretriggers will be confiugred to work in back to back mode: PDB_CH1n_C1[BB] bits are set for all the group channels, except the first one.
                                  The first channel conversion complete will trigger the PDB channel's second pretrigger, and so on until the last channel of the group. This ensures that the channel conversions occur in sequence, as quickly as possible and without causing internal PDB errors.
                                  The Adc driver can convert only up to N channels at once; for groups larger than N channels, Adc driver will split the group in sub-groups of N and convert them with sub-group conversions. Interrupt processing is needed between the sub-groups for register re-configuration. The 16 channels are converted using 2 PDB channels (each controlling 8 pretriggers), but the 2 channels do not work in back to back mode together, so a delay is needed for the 2nd PDB channel, otherwise PDB errors will occur. Adc driver will configure this delay value when Back to back mode is used, with the value defined by the user in AdcDelayNextPdb parameter. The sequences of 8 channels associated to a PDB channel will happen in back to back mode.
                                  If AdcGroupInBacktoBackMode is not enabled for a group, all pretriggers of the PDB channels will be triggered at the same time causing internal PDB errors, unless the coherence of channel conversions is ensured via the delay configured for each pretrigger. This is why at least one of AdcGroupInBacktoBackMode and AdcGroupUsesChannelDelays options needs to be configured for an Adc Group.
                                  If both parameters are configured for the Adc Group, the user can configure a delay only for the first channel conversion, and the rest will be converted in back to back mode.
                                  If AdcGroupUsesChannelDelays is not configured for the group, the first channel will have an associated delay of 0, and will convert immediately after the external trigger is received.</p></html>]]>
                            </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                              type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group In Back to Back Mode"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:3ca7b97c-36e2-4d2a-a199-37c07804cb6c"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="READONLY" value="false"/>
                          <a:da name="INVALID" type="XPath">
                           <a:tst expr="(node:fallback(.,'false') = 'false') and (node:fallback(../AdcGroupUsesChannelDelays,'false') = 'false')"
                            true="At least one of AdcGroupUsesChannelDelays and AdcGroupInBacktoBackMode has to be enabled for an Adc group."/>
                           <a:tst expr="(node:fallback(.,'false') = 'true') and (node:fallback(../AdcGroupUsesChannelDelays,'false') = 'false')
                           and (../AdcGroupTriggSrc='ADC_TRIGG_SRC_SW') and (node:fallback(../AdcEnableDoubleBuffering,'false') = 'true')"
                            true="Group double buffering for software trigger cannot be configured in only back-to-back mode"/>
                          </a:da>  
                        </v:var>  

                        <!-- AdcGroupUsesChannelDelays -->
                        <v:var name="AdcGroupUsesChannelDelays" type="BOOLEAN">
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(node:fallback(.,'false') = 'false') and (node:fallback(../AdcGroupInBacktoBackMode,'false') = 'false')"
                            true="At least one of AdcGroupUsesChannelDelays and AdcGroupInBacktoBackMode has to be enabled for an Adc group."/>
                          </a:da>
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>Enable/ Disable the usage of channel delays in PDB pretriggers.
                                  The PDB hardware unit is used to initiate individual channel conversions that are required for each group conversion, with one PDB pretrigger controlling the timing of each ADC channel conversion.
                                  When AdcGroupUsesChannelDelays is enabled, the PDB pretriggers will have individual delays configured. PDB_CH1nDLYx will be set with the values configured in AdcChannelDelay list for each channel. The values must not be equal or too close, otherwise PDB internal errors will occur.
                                  The Adc driver can convert only up to 16 channels at once; for groups larger than 16 channels, Adc driver will split the group in sub-groups of 16 and convert them with sub-group conversions. Interrupt processing is needed between the sub-groups for register re-configuration. The timing of the channel conversions will be accurate only for the first 16 channels; for the next ones, the on top of the configured delay, the delay of previous conversions and interrupt processing will be implicitly added. For this reason, it's safe co confiugre a delay of 0 for the 17th channel. But the delay values for each group of 16 need to be increasing, so that the channel conversions occur in the order they were defined in the group.
                                  If AdcGroupInBacktoBackMode is also configured for the Adc Group, the user can configure a delay only for the first channel conversion, and the rest will be converted in back to back mode (see description of AdcGroupInBacktoBackMode). The delay value defined by the user in AdcDelayNextPdb parameter will be used for 2nd PDB channel to avoid PDB internal errors.</p></html>]]>
                            </a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                              type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Group Uses Channel Delays"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:3ca7b97c-36e2-4d2a-a199-37c07804cb6b"/>
                          <a:da name="DEFAULT" value="false"/>
                          <a:da name="READONLY" value="false"/>
                        </v:var>
                        
                        <!-- AdcDelayNextPDB -->
                        <v:var name="AdcDelayNextPdb" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>The PDB unit can have one or more PDB Channels of 8 pretriggers each that will be used together for setting up conversions of large groups. The PDB Channels will be started together when the PDB unit is triggered, thus risking to request conversions at the same time and causing internal errors. For this reason, the value of AdcDelayNextPdb is needed to be added as delay between PDB channels when Back to Back mode is used. The AdcDelayNextPdb value should be greater than the timing to convert 8 channels. The maximum total conversion time is determined by the clock source chosen and the divide ratio selected. The clock source is selectable by CFG1[ADICLK], and the divide ratio is specified by CFG1[ADIV]. To calculate total conversion time for one channel the following formula is applied: ADC TOTAL CONVERSION TIME = Sample Phase Time (set by SMPLTS+1) + Hold Phase (1 ADC Cycle) + Compare Phase Time (8-bit Mode=20 ADC Cycles, 10-bit Mode=24 ADC Cycles, 12-bit Mode=28 ADC Cycles) + Single or First continuous time adder (5 ADC cycles + 5 bus clock cycles).</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Delay Next PDB"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:9a91442b-1277-4d7d-8059-624a47f18644c"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="EDITABLE" type="XPath" expr="(num:i(count(../AdcGroupDefinition/*)) &gt; 8)"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=65535"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(num:i(count(../AdcGroupDefinition/*)) > 8) and (node:fallback(../AdcGroupInBacktoBackMode,'false') = 'true') and (. = 0)"
                                true="AdcDelayNextPdb shall be more than 0 when AdcGroupInBacktoBackMode is used with number of group channels are more than 8."/>
                          </a:da>
                        </v:var>
                        
                        <!-- AdcPdbPeriodContinuousMode -->
                        <v:var name="AdcPdbPeriodContinuousMode" type="INTEGER">
                          <a:a name="DESC">
                            <a:v><![CDATA[EN:<html><p>The period of PBD module in continuous mode. This is specific and only used for continuous group without interrupt. The PDB period should be big enough to ensure all of the channels complete the convertion before PDB restarts</p></html>]]></a:v>
                          </a:a>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="Adc Pdb Period For Continous Mode"/>
                          <a:a name="ORIGIN" value="NXP"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" value="ECUC:9a91442b-1277-477d-8059-624a47f18644c"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="EDITABLE" type="XPath" expr="(../AdcWithoutInterrupts = 'true') and (../AdcGroupConversionMode='ADC_CONV_MODE_CONTINUOUS')"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=65535"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(. = 0) and (node:fallback(../AdcGroupInBacktoBackMode,'false') = 'true') and (node:fallback(../AdcWithoutInterrupts,'false') = 'true') 
                            and (node:fallback(../AdcGroupUsesChannelDelays,'false') = 'false') and (../AdcGroupConversionMode='ADC_CONV_MODE_CONTINUOUS')"
                                true="AdcPdbPeriodContinuousMode shall be more than 0 when only AdcGroupInBacktoBackMode and AdcWithoutInterrupts are used."/>
                          </a:da>
                        </v:var>
                           
                        <!-- ADC092, ADC098, ADC014_Conf -->
                        <!-- AdcGroupDefinition -->
                        <!-- /** @implements AdcGroupDefinition_Object */ -->
                        <v:lst name="AdcGroupDefinition">
                          <a:da name="MIN" value="1"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="num:i(count(node:refs(./*)/AdcChannelLimitCheck[.='true'])) &gt; 1"
                              true="ADC channels with limit checking feature enabled have to be assigned to ADC groups which consist exactly of one limit checking enabled ADC channel."/>
                              <!-- ADC451 -->
                            <a:tst expr="(../../../../../../AdcGeneral/AdcEnableLimitCheck = 'true') and (num:i(count(node:current()/*)) &gt; 1) and (num:i(count(node:refs(./*)/AdcChannelLimitCheck[.='true'])) = 1)"
                              true="ADC Channel group must contain exactly one ADC Channel if the AdcEnableLimitCheck in AdcGeneral container is enabled and a channel with specific limit checking is into the group."/>
                            <a:tst expr="((node:fallback(../../../../../../AutosarExt/AdcOptimizeOneShotHwTriggerConversions,'false') = 'true') and (num:i(count(node:current()/*)) &gt; 16))"
                              true="Only up to 16 channels can be configured for an Adc Group if Adc/AutosarExt/AdcOptimizeOneShotHwTriggerConversions is enabled."/>
                            <a:tst expr="((node:fallback(../AdcEnableDoubleBuffering,'false') = 'true') and (num:i(count(node:current()/*)) &gt; ecu:get(&apos;Adc.AdcConfigSet.AdcScRegisterUsed&apos;)))"
                              true="If group is configured double buffering more than one channel, maximum channels can be configured for an Adc Group depending on maximum number of SCn registers."/>
                            <a:tst expr="(node:fallback(../AdcEnableDoubleBuffering,'false') = 'true')
                            and (num:i(count(node:current()/*)) &gt; 1)
                            and (((node:fallback(../../../AdcHwUnitId,'ADC0') = 'ADC0') and count(node:refs('ASPathDataOfSchema:/TS_T40D2M10I2R0/Mcl')/MclConfigSet/DMAChannel/*/MclDMAChannelEnable[.='true']/../MclDmaTransferCompletionNotif[.= 'Adc_Adc12bsarv2_DmaTransferComplete0']/../DmaSource0[.= 'NOT_USED']) = 0)
                                  or ((node:fallback(../../../AdcHwUnitId,'ADC0') = 'ADC1') and count(node:refs('ASPathDataOfSchema:/TS_T40D2M10I2R0/Mcl')/MclConfigSet/DMAChannel/*/MclDMAChannelEnable[.='true']/../MclDmaTransferCompletionNotif[.= 'Adc_Adc12bsarv2_DmaTransferComplete1']/../DmaSource0[.= 'NOT_USED']) = 0))"
                              true="DMA channel with source is NOT_USED must be configured for double buffering enable more than one channel (DBMO)."/>
                          </a:da>
                          <!-- /** @requirements ADC098, ADC277 */ -->
                          <v:ref name="AdcGroupDefinition" type="REFERENCE">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Assignment of AdcChannels to a AdcGroups. For each AdcChannel that should belong to the group, a reference needs to be defined.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                              <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="UUID" value="ECUC:4f041abe-5a38-4e74-9d21-d6f65dd4dac9"/>
                            <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Adc/AdcConfigSet/AdcHwUnit/AdcChannel"/>
                            <a:da name="INVALID" type="XPath">
                              <a:tst expr=".=''" true="Select an ADC channel for the configured group."/>
                              <!-- ADC277 -->
                              <a:tst expr="contains(., ../../../../@name)" false="The ADC channel must be mapped on the same Hw Unit Group."/>
                              <a:tst expr="count(text:grep(../../../../AdcChannel/*/@name, substring-after(substring-after(substring-after(substring-after(substring-after(string(.), '/'), '/'),'/'),'/'), '/')))>0"
                                 false="The ADC channel must be defined on the Hw Unit Group."/>
                            </a:da>
                          </v:ref>
                        </v:lst>
                        
                        <!-- AdcChannelDelay -->
                        <v:lst name="AdcChannelDelay">
                          <a:da name="MIN" value="0"/>
                          <a:a name="EDITABLE" type="XPath">
                              <a:tst expr="node:fallback(../AdcGroupUsesChannelDelays,'false') = 'true'"/>
                          </a:a>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="(node:fallback(../AdcGroupUsesChannelDelays,'false') = 'true') and (node:fallback(../AdcGroupInBacktoBackMode,'false') = 'true') and (num:i(count(node:current()/*)) != 1)"
                            true="Delay values must be defined just for the first channels of group."/>
                            <a:tst expr="(node:fallback(../AdcGroupUsesChannelDelays,'false') = 'true') and (node:fallback(../AdcGroupInBacktoBackMode,'false') = 'false') and (num:i(count(node:current()/*)) != num:i(count(../AdcGroupDefinition/*)))"
                            true="Every channel assigned to this group must have an associated delay value."/>
                          </a:da>
                          
                          <!-- AdcChannelDelay -->
                          <v:var name="AdcChannelDelay" type="INTEGER">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Delay of the associated PDB pretrigger for this channel. If Back to Back mode is not used for this group, the user must ensure the difference between the delays of different channels are big enough to accomodate the Adc conversions without PDB channel sequence errors. If Back to Back mode is used for this group, only the delay for the first channel will be considered - the rest of the channels will be converted in back to back mode. The delay value have to be a increasing numbers for each sequence of 16.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/> 
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="Adc Channel Delay"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:9a91442b-1277-4d7d-8059-624a47f1844d"/>
                            <a:da name="DEFAULT" type="XPath" expr="num:i(floor(number(((num:i(node:fallback(./@index, '0') div 8)) mod 2) != 0) * num:i(node:fallback(../../AdcDelayNextPdb, '0')))+ (((node:fallback(./@index, '0')) mod 16) * 50))"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65535"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                            <a:da name="INVALID" type="XPath">
                              <a:tst expr="(. &lt; node:fallback(../../AdcChannelDelay/*[(@index &gt; node:current()/@index) and (@index &lt; (floor(((node:current()/@index) div 16) + 1) * 16))], 999999)) or (. = ../../AdcChannelDelay/*[last()]) or (((node:current()/@index + 1) mod 16) = 0)" 
                                     false="The delay value have to be a increasing numbers for each sequence of 16"/>
                            </a:da>
                          </v:var>
                        </v:lst>
                        
                        <v:ctr name="AdcGroupNormalConversionTimings" type="IDENTIFIABLE">
                          <a:a name ="DESC">
                          <a:v>
                              <![CDATA[<html><p> Selects Normal values used for programming clock frequency, conversion timing and hardwre averaging used at initialization and also by Adc_SetClockMode API when it is called with parameter ADC_NORMAL. </p></html>]]></a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="node:fallback(../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false'"/>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c6e63e6"/>
                          
                          <!-- AdcHardwareAverageEnable -->
                          <v:var name="AdcGroupHardwareAverageEnable" type="BOOLEAN">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Enables the hardware average function of the ADC.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="Adc Hardware Average Enable"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:8fd361db-6ed5-41d7-9ecb-b2046cd3f993"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false'"/>
                            </a:a>
                          </v:var>
                          
                          <!-- AdcHardwareAverageSelect -->
                          <v:var name="AdcGroupHardwareAverageSelect" type="ENUMERATION">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Determines how many ADC conversions will be averaged to create the ADC average result. This functionality is activated when ADCx_SC3[AVGE] = 1.
                                      <ul>
                                      <li>SAMPLES_4        - 4 samples averaged.</li>
                                      <li>SAMPLES_8        - 8 samples averaged.</li>
                                      <li>SAMPLES_16       - 16 samples averaged.</li>
                                      <li>SAMPLES_32       - 32 samples averaged.</li>
                                      </ul>.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="LABEL" value="Adc Hardware Average Select"/>
                            <a:a name="UUID" value="ECUC:f1f0591f-5cc8-4ed5-be66-b24399ffed3e"/>
                            <a:da name="DEFAULT" value="SAMPLES_4"/>
                            <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="(node:fallback(../AdcGroupHardwareAverageEnable,'true') = 'true') and (node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false')"/>
                            </a:a>
                            <a:da name="RANGE">
                                <a:v>SAMPLES_4</a:v>
                                <a:v>SAMPLES_8</a:v>
                                <a:v>SAMPLES_16</a:v>
                                <a:v>SAMPLES_32</a:v>
                            </a:da>
                          </v:var>
                          
                          <!-- AdcSampleTimeDuration -->
                          <v:var name="AdcGroupSampleTimeDuration" type="INTEGER">
                             <a:a name="DESC"> 
                                  <a:v><![CDATA[EN:<html><p>Selects a sample time of 2 to 256 ADCK clock cycles. The value written to this register is the desired sample time minus 1.</p></html>]]></a:v>
                             </a:a>
                             <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                             <a:a name="SCOPE" value="LOCAL"/>
                             <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                 type="IMPLEMENTATIONCONFIGCLASS">
                             <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                             <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                             </a:a>
                             <a:a name="LABEL" value="Adc Sample Time Duration"/>
                             <a:a name="ORIGIN" value="NXP"/>
                             <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                             <a:a name="UUID" value="ECUC:6153a38d-da3e-4d9e-8564-f8fe85f7b2b3"/>
                             <a:da name="DEFAULT" value="2"/>
                             <a:da name="INVALID" type="Range">
                               <a:tst expr="&lt;=256"/>
                               <a:tst expr="&gt;=2"/>
                             </a:da>
                             <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false'"/>
                             </a:a>
                          </v:var>
                          
                          <!-- AdcClockDivideSelect -->
                          <v:var name="AdcGroupClockDivideSelect" type="ENUMERATION">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Selects the divide ratio used by the ADC to generate the internal clock ADCK.
                                      <ul>
                                      <li>DIV_NONE        - Input clock.</li>
                                      <li>DIV_2           - Input clock / 2.</li>
                                      <li>DIV_4           - Input clock / 4.</li>
                                      <li>DIV_8           - Input clock / 8.</li>
                                      </ul>.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="LABEL" value="Adc Clock Divide Select"/>
                            <a:a name="UUID" value="ECUC:09a81631-53de-45eb-a71f-98a42f689765"/>
                            <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false'"/>
                            </a:a>
                            <a:da name="DEFAULT" value="DIV_NONE"/>
                            <a:da name="RANGE">
                                <a:v>DIV_NONE</a:v>
                                <a:v>DIV_2</a:v>
                                <a:v>DIV_4</a:v>
                                <a:v>DIV_8</a:v>
                            </a:da>
                          </v:var>
                        </v:ctr>
                        
                        <v:ctr name="AdcGroupAlternateConversionTimings" type="IDENTIFIABLE">
                          <a:a name ="DESC">
                          <a:v>
                              <![CDATA[<html><p> Selects alternate values used for programming clock frequency, conversion timing and hardwre averaging. This is available when AdcEnableDualClockMode has been enabled and AdcConvTimeOnce has been disable. </p></html>]]></a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="EDITABLE" type="XPath">
                              <a:tst expr="(node:fallback(../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false') and 
                                           (node:fallback(../../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true')"/>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c1131"/>
                          
                          <!-- AdcGroupAltHardwareAverageEnable -->
                          <v:var name="AdcGroupAltHardwareAverageEnable" type="BOOLEAN">
                            <a:a name="DESC">
                              <a:v><![CDATA[EN:<html><p>Enables the alternate hardware average function of the ADC.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="LABEL" value="Adc Group Alternate Hardware Average Enable"/>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" value="ECUC:8fd361db-6ed5-41d7-9ecb-b2046cd31132"/>
                            <a:da name="DEFAULT" value="false"/>
                            <a:a name="EDITABLE" type="XPath">
                                <a:tst expr="(node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false') and 
                                (node:fallback(../../../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true')"/>
                            </a:a>
                          </v:var>
                          
                          <!-- AdcGroupAltHardwareAverageSelect -->
                          <v:var name="AdcGroupAltHardwareAverageSelect" type="ENUMERATION">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Selects the Group Alternate Hardware Average to determine how many ADC conversions will be averaged to create the ADC average result. This functionality is activated when ADCx_SC3[AVGE] = 1.
                                      <ul>
                                      <li>SAMPLES_4        - 4 samples averaged.</li>
                                      <li>SAMPLES_8        - 8 samples averaged.</li>
                                      <li>SAMPLES_16       - 16 samples averaged.</li>
                                      <li>SAMPLES_32       - 32 samples averaged.</li>
                                      </ul>.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="LABEL" value="Adc Group Alternate Hardware Average Select"/>
                            <a:a name="UUID" value="ECUC:f1f0591f-5cc8-4ed5-be66-b24399ff1133"/>
                            <a:da name="DEFAULT" value="SAMPLES_4"/>
                            <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="(node:fallback(../AdcGroupAltHardwareAverageEnable,'true') = 'true') and (node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false') and 
                                    (node:fallback(../../../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true')"/>
                            </a:a>
                            <a:da name="RANGE">
                                <a:v>SAMPLES_4</a:v>
                                <a:v>SAMPLES_8</a:v>
                                <a:v>SAMPLES_16</a:v>
                                <a:v>SAMPLES_32</a:v>
                            </a:da>
                          </v:var>
                          
                          <!-- AdcGroupAltSampleTimeDuration -->
                          <v:var name="AdcGroupAltSampleTimeDuration" type="INTEGER">
                             <a:a name="DESC"> 
                                  <a:v><![CDATA[EN:<html><p>Selects a alternate sample time of 2 to 256 ADCK clock cycles. The alternate value written to this register is the desired sample time minus 1.</p></html>]]></a:v>
                             </a:a>
                             <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                             <a:a name="SCOPE" value="LOCAL"/>
                             <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                 type="IMPLEMENTATIONCONFIGCLASS">
                             <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                             <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                             </a:a>
                             <a:a name="LABEL" value="Adc Group Alternate Sample Time Duration"/>
                             <a:a name="ORIGIN" value="NXP"/>
                             <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                             <a:a name="UUID" value="ECUC:6153a38d-da3e-4d9e-8564-f8fe85f71134"/>
                             <a:da name="DEFAULT" value="2"/>
                             <a:da name="INVALID" type="Range">
                               <a:tst expr="&lt;=256"/>
                               <a:tst expr="&gt;=2"/>
                             </a:da>
                             <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="(node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false') and 
                                    (node:fallback(../../../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true')"/>
                             </a:a>
                          </v:var>
                          
                          <!-- AdcGroupAltClockDivideSelect -->
                          <v:var name="AdcGroupAltClockDivideSelect" type="ENUMERATION">
                            <a:a name="DESC">
                                 <a:v><![CDATA[EN:<html><p>Selects the alternate divide ratio used by the ADC to generate the internal clock ADCK.
                                      <ul>
                                      <li>DIV_NONE        - Input clock.</li>
                                      <li>DIV_2           - Input clock / 2.</li>
                                      <li>DIV_4           - Input clock / 4.</li>
                                      <li>DIV_8           - Input clock / 8.</li>
                                      </ul>.</p></html>]]></a:v>
                            </a:a>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>    
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS"
                                type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="NXP"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="LABEL" value="Adc Group Alternate Clock Divide Select"/>
                            <a:a name="UUID" value="ECUC:09a81631-53de-45eb-a71f-98a42f681135"/>
                            <a:a name="EDITABLE" type="XPath">
                                    <a:tst expr="(node:fallback(../../../../../../../AutosarExt/AdcConvTimeOnce,'false') = 'false') and 
                                    (node:fallback(../../../../../../../AutosarExt/AdcEnableDualClockMode,'false') = 'true')"/>
                            </a:a>
                            <a:da name="DEFAULT" value="DIV_NONE"/>
                            <a:da name="RANGE">
                                <a:v>DIV_NONE</a:v>
                                <a:v>DIV_2</a:v>
                                <a:v>DIV_4</a:v>
                                <a:v>DIV_8</a:v>
                            </a:da>
                          </v:var>
                        </v:ctr>
                        
                      </v:ctr>
                    </v:lst>
                  </v:ctr>
                </v:lst>
              </v:ctr>

              <!-- ADC027_Conf -->
              <!-- AdcGeneral Big Container -->
              <!-- /** @implements AdcGeneral_Object */ -->
              <v:ctr name="AdcGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>General configuration (parameters) of the ADC Driver software module.</p></html>]]></a:v>
                </a:a>
                <a:a name="UUID" value="ECUC:a7ba93ea-53df-4911-b983-b2944b789c9a"/>

                <!-- ADC404_Conf -->
                <!-- AdcDeInitApi -->
                <v:var name="AdcDeInitApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds/removes the service Adc_DeInit() from the code.
                                              true: Adc_DeInit() can be used. false: Adc_DeInit() can not be used.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc_DeInit API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:dc521881-6b64-4e19-8ef2-a1d02985d3db"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>

                <!-- ADC405_Conf, ADC233, ADC269 -->
                <!-- /** @implements AdcDevErrorDetect_Object */ -->
                <v:var name="AdcDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Switches the Default Error Tracer (Det) detection and notification ON or OFF.
                                              true: Enabled (ON). false: Disabled (OFF).</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Development Error Detection"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:a7329946-1ee0-4876-927a-adb6f9dac3a4"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- ADC452_Conf -->
                <!-- AdcEnableLimitCheck -->
                <v:var name="AdcEnableLimitCheck" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Enable/disable limit checking feature in the ADC driver.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Enable Limit Check"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:a08f8e15-51d7-403e-a48f-6d60c5397755"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- ADC311 , ADC391_Conf -->
                <!-- AdcEnableQueuing -->
                <v:var name="AdcEnableQueuing" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Determines, if the queuing mechanism is active in case of priority mechanism disabled. Enable/Disable the Queue. 
                                              Note that if AdcPriorityImplementation = ADC_PRIORITY_HW_SW, this field is always enabled.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Queue"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:d275628f-b317-4a7b-ba33-d047d1ed239f"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:a name="EDITABLE" type="XPath">
                    <a:tst expr="../AdcPriorityImplementation = 'ADC_PRIORITY_NONE'"/>
                  </a:a>
                </v:var>

                <!-- ADC406_Conf -->
                <!-- AdcEnableStartStopGroupApi -->
                <v:var name="AdcEnableStartStopGroupApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds / removes the services Adc_StartGroupConversion() and Adc_StopGroupConversion from the code.
                                              true: Adc_StartGroupConversion() and Adc_StopGroupConversion() can be used. 
                                              false: Adc_StartGroupConversion() and Adc_StopGroupConversion() can not be used.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc_StartStopGroup API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:416d42b9-351b-4b42-a0e1-f598e02e1bc5"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:a name="INVALID" type="XPath">
                    <a:tst expr="(. = 'false') and (../AdcHwTriggerApi = 'false')"
                           true="At least one of 2 parameters AdcEnableStartStopGroupApi or AdcHwTriggerApi has to be enabled in order to be able to use the ADC driver."/>
                  </a:a>
                </v:var>

                <!-- ADC105_Conf, ADC085 -->
                <!-- AdcGrpNotifCapability -->
                <v:var name="AdcGrpNotifCapability" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Determines, if the group notification mechanism (the functions to enable and disable the notifications) is available at runtime.
                                              true: Enabled. false: Disabled.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Notification Capability"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:e06b25fe-9949-46fe-b350-3deb0f8d569c"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>

                <!-- ADC408_Conf -->
                <!-- AdcHwTriggerApi -->
                <v:var name="AdcHwTriggerApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds / removes the services Adc_EnableHardwareTrigger() and Adc_DisableHardwareTrigger() from the code.
                                              true: Adc_EnableHardwareTrigger() and Adc_DisableHardwareTrigger() can be used. 
                                              false: Adc_EnableHardwareTrigger() and Adc_DisableHardwareTrigger() can not be used.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Hw Trigger  API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:f9863fdc-7040-453a-b3f5-761915440f03"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- ADC394_Conf -->
                <!-- AdcReadGroupApi -->
                <v:var name="AdcReadGroupApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds / removes the service Adc_ReadGroup() from the code.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc_ReadGroup API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:e36f41b2-54b0-4cfb-ab31-bc2fa4ac19b2"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>

                <!-- ADC409_Conf, ADC237 -->
                <!-- AdcVersionInfoApi -->
                <v:var name="AdcVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds / removes the service Adc_GetVersionInfo() from the code.
                            true: Adc_GetVersionInfo() can be used. false: Adc_GetVersionInfo() can not be used.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc_VersionInfo API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:0cc80d95-c0b9-4193-bc8a-31c9e6e6f6ea"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                
                <!-- ADC315, ADC340, ADC341, ADC393_Conf -->
                <!-- AdcPriorityImplementation -->
                <v:var name="AdcPriorityImplementation" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Determines whether a priority mechanism is available for prioritization of the conversion requests and if available, the type of prioritization mechanism. 
                    The selection applies for groups with trigger source software and trigger source hardware. 
                    Two types of prioritization mechanism can be selected. 
                    The hardware prioritization mechanism (AdcPriorityHw) uses the ADC hardware features for prioritization of the software conversion requests and hardware trigger signals for groups with trigger source hardware. 
                    The mixed hardware and software prioritization mechanism (AdcPriorityHwSw) uses the ADC hardware features for prioritization of ADC
                    hardware trigger for groups with trigger source hardware and a software implemented prioritization mechanism for groups with trigger source software. 
                    The group priorities for software triggered groups are typically configured with lower priority levels than the group priorities for hardware triggered groups.
                    For this platform, the ADC_PRIORITY_HW isn't used.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Priority Mechanism"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:06ffda84-6c86-4dd4-a874-b37b5a390858"/>
                  <a:da name="DEFAULT" value="ADC_PRIORITY_NONE"/>
                  <a:da name="RANGE">
                    <a:v>ADC_PRIORITY_HW</a:v>
                    <a:v>ADC_PRIORITY_HW_SW</a:v>
                    <a:v>ADC_PRIORITY_NONE</a:v>
                  </a:da>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr=".='ADC_PRIORITY_HW'"
                    true="Priority Hardware mechanism is not supported."/>
                  </a:da>
                </v:var>
                
                <!-- ADC444_Conf -->
                <!-- AdcResultAlignment -->
                <v:var name="AdcResultAlignment" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Alignment of ADC raw results in ADC result buffer (left/right alignment).</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Result Alignment"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:b5d3c65b-2fbc-4442-ba19-3c6f9876bbf7"/>
                  <a:da name="DEFAULT" value="ADC_ALIGN_RIGHT"/>
                  <a:da name="READONLY" value="true"/>
                  <a:da name="RANGE">
                    <a:v>ADC_ALIGN_LEFT</a:v>
                    <a:v>ADC_ALIGN_RIGHT</a:v>
                  </a:da>
                </v:var>

                <!-- ADC-Timeout -->
                <v:var name="AdcTimeout" type="INTEGER">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>This is a timeout value which is used to wait till
                            - ADC hardware is disabled
                            - Convertion completed in calibration feature
                            If the Status is not updated then after this timeout the ADC_E_TIMEOUT
                            production error will be reported and the rest of the functionality will be skipped</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Timeout:"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:eca57c57-1c1d-4905-bb80-4430bb5b04a0" />
                  <a:da name="DEFAULT" value="65535" />
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=4294967295" />
                    <a:tst expr="&gt;=1000" />
                  </a:da>
                </v:var>
                
                <!-- Dma transfering Timeout -->
                <v:var name="AdcDmaTimeout" type="INTEGER">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>This is a timeout value which is used to wait till Dma transfering finish. It's used to ensure the re-configure dma setting when PDB error occur
                            If the Status is not updated then after this timeout the ADC_E_TIMEOUT
                            production error will be reported and the rest of the functionality will be skipped.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Dma Transfering Timeout:"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:eca57c57-1c1d-4905-bb80-4455bb5b04a0" />
                  <a:da name="DEFAULT" value="65535" />
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=4294967295" />
                    <a:tst expr="&gt;=1000" />
                  </a:da>
                </v:var>
                
                <!-- AdcPriorityQueueMaxDepth -->
                <v:var name="AdcPriorityQueueMaxDepth" type="INTEGER">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Maximum depth of queue used for queuing of incoming conversion requests when hardware unit is busy.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Max Queue Depth"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:33cfe352-1333-43a6-b6d2-54239b433f1b"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="RANGE" type="XPath">
                    <a:tst expr="../../AdcGeneral/AdcPriorityImplementation = 'ADC_PRIORITY_NONE' and ../../AdcGeneral/AdcEnableQueuing = 'false' and . !=1" true="The depth must be 1 if the AdcGeneral/AdcEnableQueuing is disabled and AdcGeneral/AdcPriorityImplementation is set as ADC_PRIORITY_NONE."/>
                  </a:da>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=1024"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                
                <!-- /** @implements AdcLowPowerStatesSupport_Object */ -->
                <v:var name="AdcLowPowerStatesSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Adds / removes all power state management related APIs (Adc_SetPowerState, Adc_GetCurrentPowerState, Adc_GetTargetPowerState, Adc_PreparePowerState, Adc_Main_PowerTransitionManager), indicating if the HW offers low power state management. This parameter is disabled, there is no power management support implemented for this platform.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                  <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="false"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Low Power States Support"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:e2930cb1-2824-42e0-84fd-4e72fb180e7d"/>
                  <a:da name="READONLY" value="true"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                
                <!-- /** @implements AdcPowerStateAsynchTransitionMode_Object */ -->
                <v:var name="AdcPowerStateAsynchTransitionMode" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Enables / disables support of the ADCDriver to the asynchronous power state transition. This feature is not implemented on this platform.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                  <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="false"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Power State Asynch Transition Mode"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:c20b0644-70bf-435d-ace6-8626ec469675"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" expr="node:exists(AdcLowPowerStatesSupport) and (../AdcLowPowerStatesSupport = 'true')"/>
                </v:var>
                
                <!-- /** @implements AdcPowerStateConfig_Object */ -->
                <v:lst name="AdcPowerStateConfig" type="MAP">
                  <a:da name="EDITABLE"  type="XPath" expr="(../AdcPowerStateAsynchTransitionMode = 'true' )"/>
                  <v:ctr name="AdcPowerStateConfig" type="IDENTIFIABLE">
                    <a:a name="DESC">
                        <a:v><![CDATA[EN:<html><p>Each instance of this parameter defines a power state and the callback to be called when this power state is reached.</p></html>]]></a:v>
                    </a:a>
                    <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="false"/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="UUID" value="ECUC:66904f78-ff07-4ed3-878e-401a3430cd38"/>
               
                    <!-- /** @implements AdcPowerState_Object */ -->
                    <v:var name="AdcPowerState" type="INTEGER">
                      <a:a name="DESC">
                        <a:v><![CDATA[EN:<html><p>Each instance of this parameter describes a different power state 
                             supported by the ADC HW. It should be defined by the HW supplier and 
                             used by the ADCDriver to reference specific HW configurations which set 
                             the ADC HW module in the referenced power state. At least the power mode
                             corresponding to full power state shall be always configured.
                             This parameter shall only be configured if the parameter AdcLowPowerStatesSupport is set to true.</p></html>]]>
                        </a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                      <a:a name="UUID"  value="ECUC:41902199-e783-4afe-bef3-41c69e08b32d"/>
                      <a:da name="DEFAULT" value="0"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=18446744073709551615"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>                      
                    </v:var>
               
                    <!-- /** @implements AdcPowerStateReadyCbkRef_Object */ -->
                    <v:var name="AdcPowerStateReadyCbkRef" type="FUNCTION-NAME">
                      <a:a name="DESC">
                        <a:v><![CDATA[EN:<html><p>Each instance of this parameter contains a reference to a power mode callback defined in a CDD or IoHwAbs component.
                             This parameter shall only be configured if the parameter AdcLowPowerStatesSupport is set to true</p></html>]]>
                        </a:v>
                      </a:a>
                      <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" value="ECUC:b9c222fc-6b92-40e9-922e-f73addaf2320"/>
                      <a:da name="DEFAULT" value="NULL_PTR"/>
                    </v:var>
                  </v:ctr>
                </v:lst>
              </v:ctr>
              
              <v:lst name="AdcInterrupt" type="MAP">
                  <a:da name="MIN" type="XPath" expr="num:i(count(ecu:list('Adc.AdcInterrupts')))"/>
                  <a:da name="INVALID" type="XPath">
                       <a:tst expr="num:i(count(node:current()/*)) &gt; num:i(count(ecu:list('Adc.AdcInterrupts')))"
                       true="Maximum ADC Interrrupt available for the selected derivative was exceeded."/>
                    </a:da>
                  <v:ctr name="AdcInterrupt" type="IDENTIFIABLE">
                    <a:a name ="DESC">
                    <a:v>
                        <![CDATA[<html><p> Selects whether the interrupt for each ADC Unit will be enabled. For each Adc HW unit, there are 2 interrupts that can be enabled: the End of Conversion and the Watchdong interrupts. These settings are used for optimizing the code size by removing the interrupt handling code for interrupts that are not needed. . </p></html>]]></a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="UUID" value="ECUC:0cb2283c-677d-434e-80a6-169b5c6e63e8"/>

                       <v:var name="AdcInterruptSource" type="ENUMERATION">
                           <a:a name="DESC">
                               <a:v>
                                   <![CDATA[EN:<html>
                                       The name of the interrupt.<p/>
                                       Note: Implementation Specific Parameter.
                                   </html>]]>
                               </a:v>
                           </a:a>
                           <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                               <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                               <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                           </a:a>
                           <a:a name="ORIGIN" value="NXP"/>
                           <a:a name="LABEL" value="Adc Interrupt Name"/>
                           <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                           <a:a name="SCOPE" value="LOCAL"/>
                           <a:a name="UUID" value="ECUC:0fef779b-bf2c-466a-9110-5f848d8e3e17"/>
                           <a:da name="DEFAULT" type="XPath" expr="ecu:list('Adc.AdcInterrupts')[num:i(node:fallback(node:current()/../@index, num:i(0)) + 1)]"/>
                           <a:da name="RANGE" type="XPath" expr="ecu:list('Adc.AdcInterrupts')"/>
                           <a:da name="INVALID" type="XPath">
                               <a:tst expr="text:uniq(node:fallback(../../*/AdcInterruptSource, ecu:list('Adc.AdcInterrupts')), node:fallback(., 'ADC0_COCO'))" 
                                   false="Duplicated value, AdcInterruptSource must be unique across AdcInterrupt."/>
                           </a:da>
                       </v:var>         
                       
                      <!-- Adc Interrupt Enable -->
                      <v:var name="AdcInterruptEnable" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v><![CDATA[EN:<html><p>Adds / removes the interrupt handling routine from the ADC driver code.</p></html>]]></a:v>
                        </a:a>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Adc Interrupt Enable"/>
                        <a:a name="ORIGIN" value="NXP"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" value="ECUC:15707a07-29a2-4f44-9d3a-823d0cd58da9"/>
                        <a:da name="DEFAULT" value="false"/>
                      </v:var>
                 </v:ctr>                
              </v:lst>

              <!-- ADC030_Conf -->
              <!-- /** @implements AdcPublishedInformation_Object */ -->
              <v:ctr name="AdcPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>Additional published parameters not covered by CommonPublishedInformation container.
                    Note that these parameters do not have any configuration class setting, since they are published information.</p></html>]]></a:v>
                </a:a>
                <a:a name="UUID" value="ECUC:fa139903-d979-4e8d-8820-a0af67439e6f"/>

                <!-- ADC410_Conf -->
                <!-- AdcChannelValueSigned */ -->
                <v:var name="AdcChannelValueSigned" type="BOOLEAN_LABEL">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Information whether the result value of the ADC driver has sign information (true) or not (false). If the result shall be interpreted as signed value it shall apply to C-language rules.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Channel Value Signed"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:24d93b1f-d489-4498-abb9-53c3b7f95272"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- ADC411_Conf -->
                <!--  AdcGroupFirstChannelFixed */ -->
                <v:var name="AdcGroupFirstChannelFixed" type="BOOLEAN_LABEL">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Information whether the first channel of an ADC Channel group can be configured (false) or is fixed (true) to a value determined by the ADC HW Unit.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Group First Channel Fixed"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:67fb51a7-5ecc-4a53-9481-2bd9030509d2"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- ADC412_Conf -->
                <!--  AdcMaxChannelResolution */ -->
                <v:var name="AdcMaxChannelResolution" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Maximum Channel resolution in bits (does not specify accuracy).</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Max Channel Resolution"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:213b7071-fc50-4f52-93a1-5516036b0e8d"/>
                  <a:da name="DEFAULT" value="12"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=63"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
              </v:ctr>

              <!--  @implements CommonPublishedInformation_Object  -->
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  </p></html>]]></a:v>
                </a:a>
                <a:a name="UUID" value="ECUC:cfca3649-900e-4a97-87b7-95b297bac3c2"/>
                <!--   ArReleaseMajorVersion   -->
                <v:var name="ArReleaseMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                      </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:3584ada7-5e62-4411-b066-cee33425ce6b"/>
                  <a:da name="DEFAULT" value="4"/>                       
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&gt;=4"/>
                    <a:tst expr="&lt;=4"/>
                  </a:da>                    
                </v:var>
                <!--  ArReleaseMinorVersion   -->
                <v:var name="ArReleaseMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                      </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:ea51a70f-c31c-4f76-abe7-145b9610f913"/>
                  <a:da name="DEFAULT" value="3"/>                       
                  <a:da name="INVALID" type="Range">
                      <a:tst expr="&gt;=3"/>
                      <a:tst expr="&lt;=3"/>
                  </a:da>                    
                </v:var>
                <!--  ArReleaseRevisionVersion   -->
                <v:var name="ArReleaseRevisionVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      Revision version number of AUTOSAR specification on which the appropriate implementation is based on.
                      </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:081b5f31-42dc-444e-9110-3723f65f2604"/>
                  <a:da name="DEFAULT" value="1"/>                       
                  <a:da name="INVALID" type="Range">
                      <a:tst expr="&gt;=1"/>
                      <a:tst expr="&lt;=1"/>
                  </a:da>                    
                </v:var>
                <!--   ModuleId   -->
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      Module ID of this module from Module List.
                      </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:6f359db5-9f96-4bf4-a23c-8d2ac1f1f312"/>
                  <a:da name="DEFAULT" value="123"/>                                         
                  <a:da name="INVALID" type="Range">
                      <a:tst expr="&gt;=123"/>
                      <a:tst expr="&lt;=123"/>
                  </a:da>                    
                </v:var>
                <!--   SwMajorVersion   -->
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      Major version number of the vendor specific implementation of the module. The numbering is vendor specific.
                      </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:b38bed27-31e3-4020-b06a-f77d8ed1956f"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="INVALID" type="Range">
                      <a:tst expr="&gt;=1"/>
                      <a:tst expr="&lt;=1"/>
                  </a:da>                    
                </v:var>
                <!--   SwMinorVersion  -->
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>
                    Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:589454af-9a00-432a-b02d-83d95144344b"/>
                  <a:da name="DEFAULT" value="0"/>                     
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&gt;=0"/>
                    <a:tst expr="&lt;=0"/>
                  </a:da>                    
                </v:var>
                <!--   SwPatchVersion  -->
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>
                    Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    </p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:b727051a-ac8b-432b-b0ae-752840e3ae07"/>
                  <a:da name="DEFAULT" value="2"/>                                         
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&gt;=2"/>
                    <a:tst expr="&lt;=2"/>
                  </a:da>                    
                </v:var>
                <!--   VendorApiInfix   -->
                <v:var name="VendorApiInfix" type="STRING_LABEL">
                  <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                      In driver modules which can be instantiated several times on a single ECU, BSW00347 requires that the name of APIs is extended by the VendorId and a vendor specific name. 
                      This parameter is used to specify the vendor specific name. In total, the implementation specific name is generated as follows:
                      &lt;ModuleName&gt;_&gt;VendorId&gt;_&lt;VendorApiInfix&gt;&lt;Api name from SWS&gt;.
                      E.g.  assuming that the VendorId of the implementor is 123 and the implementer chose a VendorApiInfix of &quot;v11r456&quot; a api name Can_Write defined in the SWS will translate to Can_123_v11r456Write. 
                      This parameter is mandatory for all modules with upper multiplicity &gt; 1. It shall not be used for modules with upper multiplicity =1.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:f2e8bd26-735b-475f-867d-4290bc44c006"/>
                  <a:da name="DEFAULT" value=""/>
                  <a:da name="READONLY" value="true"/>
                </v:var>
                <!--   VendorId  -->
                <v:var name="VendorId" type="INTEGER_LABEL">
                    <a:a name="DESC">
                        <a:v><![CDATA[EN:<html><p>
                          Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list.
                        </p></html>]]></a:v>
                    </a:a>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PublishedInformation">VariantPostBuild</icc:v>
                    <icc:v vclass="PublishedInformation">VariantPreCompile</icc:v>
                  </a:a>
                    <a:a name="ORIGIN" value="NXP"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" value="ECUC:64247233-087e-4bb5-86f7-051f2a3f016f"/>
                    <a:da name="DEFAULT" value="43"/>
                    <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=43"/>
                        <a:tst expr="&lt;=43"/>
                    </a:da>                    
                </v:var>
              </v:ctr>

              <!-- AutosarExt Big Container -->
              <v:ctr name="AutosarExt" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>Autosar Extension API settings.</p></html>]]></a:v>
                </a:a>
                <a:a name="UUID" value="ECUC:756d40ca-b5d9-4ca8-9b62-769e55d8c810"/>

                <!-- @implements AdcEnableGroupDependentChannelNames_Object -->
                <v:var name="AdcEnableGroupDependentChannelNames" type="BOOLEAN">
                  <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>This is used to generate ADC symbolic names, that depend also on the ADC group 
                        to which each ADC channel is mapped. The generated symbolic name will be something 
                        like:
                        #define "ADC_GroupName"_"ADC_ChannelName"  "Channel index value", 
                        where "Channel index value" is the channel index in the current group.
                        Channel indexes in each group are generated to allow result buffer access by symbolic names.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Channel Indexes Symbolic Names"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:55643d68-b9ec-48df-af54-a50cbdf42728" />
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                
                <!-- AdcEnableDualClockMode -->
                <v:var name="AdcEnableDualClockMode" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[<html><p>Adds/removes the Dual Clock mode service Adc_SetClockMode from the code.
                          </p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Set Clock Mode API"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:100169f9-9894-40a7-ac10-a9b20a7a3222"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                
                <!-- @implements AdcEnableCalibration_Object -->
                <v:var name="AdcEnableCalibration" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>
                          If this parameter has been configured to &quot;TRUE&quot;, the AutosarExt function &quot;Adc_Calibrate()&quot;  shall be accessible, otherwise this function shall be removed from the code.
                          <h1>Note</h1>This is an Implementation Specific Parameter.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Enable Calibration API"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:00118f07-32be-429d-8b41-3f7dc39d1848"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>

                <!-- @implements AdcEnableSetChannel_Object -->
                <v:var name="AdcEnableSetChannel" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>
                          If this parameter has been configured to &quot;TRUE&quot;, the AutosarExt function &quot;Adc_SetChannel()&quot;  shall be accessible, otherwise this function shall be removed from the code.
                          <h1>Note</h1>This is an Implementation Specific Parameter.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Set Channel API"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:00118f07-32be-429d-8b41-3f7dc39d1849"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                
                <!-- ADC085 -->
                <!-- /** @implements AdcEnableInitialNotification_Object */ -->
                <v:var name="AdcEnableInitialNotification" type="BOOLEAN">
                <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>Enable/disable an extra notification to be called for each Adc Group conversion.
                          <h1>Note</h1>This feature is intended to be used together with Adc_SetChannel service. The initial notification can be used by the user application to call Adc_SetChannel API before Adc driver updates the HW configuration for the next conversion.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                <a:a name="LABEL" value="Adc Initial Notification Capability"/>
                <a:a name="ORIGIN" value="NXP"/>
                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                <a:a name="UUID" value="ECUC:e06b25fe-9949-46fe-b350-3deb0f8d5679"/>
                <a:da name="DEFAULT" value="false"/>
                <a:da name="EDITABLE" type="XPath" expr="node:fallback(../AdcEnableSetChannel,'false') = 'true'"/>
                <a:da name="INVALID" type="XPath">
                    <a:tst expr="(. = 'true') and (node:fallback(../AdcEnableSetChannel,'false') = 'false')"
                    true="AdcEnableInitialNotification can only be enabled if AdcEnableSetChannel is also enabled"/>
                </a:da>
                </v:var>
                
                <!-- @implements AdcDisableDemReportErrorStatus_Object -->
                <v:var name="AdcDisableDemReportErrorStatus" type="BOOLEAN">
                  <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>Enable/Disable Dem error reporting.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Disable Production Error Reporting"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:8436de9b-c7e1-4720-9e80-145e3870a2cb" />
                  <a:da name="DEFAULT" value="false" />
                  <a:a name="EDITABLE" type="XPath">
                    <a:tst expr="node:exists(../../AdcDemEventParameterRefs)"/>
                  </a:a>  
                </v:var>
                
                <!--  @implements AdcConvTimeOnce_Object  -->
                <v:var name="AdcConvTimeOnce" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>
                    <![CDATA[EN:<html><p> Implementation Specific Parameter.
                         Enable/Disable one time setting of the registers.
                         If Enabled, the setting of the conversion time registers will be done only once in Adc_Init() function
                        for the configured hardware unit.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Conversion Time Once"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:6d78d92b-c387-4656-ba8c-8113fdef7242"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:a name="ORIGIN" value="NXP"/>
                </v:var>
                
                <!--  @implements AdcOptimizeOneShotHwTriggerConversions_Object  -->
                <v:var name="AdcOptimizeOneShotHwTriggerConversions" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>
                    <![CDATA[EN:<html><p> Implementation Specific Parameter.
                         Enable/Disable The Adc driver optimization for HW Triggered groups, OneShot, Single access.
                         If Enabled, other types of groups cannot be configured in ADC driver and the code for interrupt routine / Dma notification will be optimized for speed.
                         Also, all groups must have at most 8 channels configrued.</p></html>]]>
                    </a:v>
                  </a:a>  
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS"
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Optimize OneShot HwTrigger Conversions"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:6d78d92b-c387-4656-ba8c-8113fdef7243"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="(.= 'true') and (../AdcEnableDoubleBufferingOptimization = 'true')"
                    true="AdcEnableDoubleBufferingOptimization and AdcOptimizeOneShotHwTriggerConversions cannot be enabled simultaneous"/>
                  </a:da>
                </v:var>
                
                <!--  @implements AdcEnableDoubleBufferingOptimization_Object  -->
                <v:var name="AdcEnableDoubleBufferingOptimization" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>
                    <![CDATA[EN:<html><p> Implementation Specific Parameter.
                         Enable/Disable the Adc driver double buffering optimization for streaming access mode.
                         </p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS"
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Enable Double Buffering Optimization"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ECUC:6d78d92b-c387-4656-ba8c-8113fdef7247"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="(.= 'true') and (../AdcEnableDmaTrasferMode = 'false')"
                    true="AdcEnableDoubleBufferingOptimization can be enabled only if Adc Global Enable DMA Transfer is available"/>
                    <a:tst expr="(.= 'true') and (../AdcOptimizeOneShotHwTriggerConversions = 'true')"
                    true="AdcEnableDoubleBufferingOptimization and AdcOptimizeOneShotHwTriggerConversions cannot be enabled simultaneous"/>
                  </a:da>
                </v:var>

                <v:var name="AdcEnableDmaTrasferMode" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>This parameter globally enables the possibility to confiugre DMA transfer for ADC converted data. 
                    If this parameter is disabled then DMA handling code will be removed at pre-compile time and DMA transfer cannot be confiugred for any Adc unit in any variant. 
                    If this parameter is enabled then the DMA confiugration code will not be removed. This is an Implementation Specific Parameter.</p></html>]]>
                    </a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Global Enable DMA Transfer"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:8436de9b-c7e1-4720-9e80-145e3870a2cc" />
                  <a:da name="DEFAULT" value="false" />
                  <a:a name="INVALID" type="XPath">
                    <a:tst expr="(. = 'true') and not(node:exists(node:refs('ASPathDataOfSchema:/TS_T40D2M10I2R0/Mcl')/MclConfigSet))"
                           true="Mcl module must be configured for DMA transfer to be used in Adc driver."/>
                  </a:a>
                </v:var>
                
                <v:var name="AdcUseHardwareNormalGroups" type="BOOLEAN">
                  <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>This parameter defines if Hardware Normal Groups are used in any Hardware Unit, any variant. It needs to be enabled if Hardware Normal Groups are needed. If Hardware Normal Groups are not needed, this parameter should be disabled  - for code optimizations.
                        This is an Implementation Specific Parameter.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Use Hardware Normal Groups"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:8436de9b-c7e1-4720-9e80-145e3870a213" />
                  <a:da name="DEFAULT" value="false" />
                </v:var>

                <!--  @implements AdcEnableUserModeSupport_Object  -->
                <v:var name="AdcEnableUserModeSupport" type="BOOLEAN">
                    <a:a name="DESC">
                        <a:v>
                            <![CDATA[EN:<html><p>
                               When this parameter is enabled, the Adc module will adapt to run from User Mode.
                               Note: No special measures need to be taken to run ADC driver from user mode; The Adc driver code can be executed at any time from both supervisor and user mode. 
                            </p></html>]]>
                        </a:v>
                    </a:a>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/> 
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                    <a:a name="LABEL" value="Enable Adc User Mode Support"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" value="ECUC:6d78d92b-c387-4656-ba8c-8113fdef7061"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:a name="ORIGIN" value="NXP"/>
                    <a:da name="READONLY" value="true"/>
                </v:var>
                
                <!-- AdcBypassConsistencyLoop -->
                <v:var name="AdcBypassConsistencyLoop" type="BOOLEAN">
                  <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>This is used to increase ADC performances.
                        If checking the HW-SW coherency is no longer guaranteed by the driver, the user must make sure 
                        he does not call a ADC service before the HW reaches the correct state.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/> 
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Bypass Consistency Loop"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:b55a0f78-06d7-4d3c-91e5-ef1538b996ca" />
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="node:fallback(.,'true') = 'true' and node:fallback(../../AdcGeneral/AdcPriorityImplementation, 'ADC_PRIORITY_HW_SW') = 'ADC_PRIORITY_HW_SW'"
                    true="AdcBypassConsistencyLoop parameter can be true if and only if there is NO priority."/>
                    <a:tst expr="node:fallback(.,'true') = 'true' and node:fallback(../../AdcGeneral/AdcEnableQueuing, 'true') = 'true'"
                    true="AdcBypassConsistencyLoop parameter can be true if and only if there is NO queue."/>
                  </a:da>
                </v:var>
                
                <!-- AdcContinuousWithoutInterrupt -->
                <v:var name="AdcContinuousWithoutInterrupt" type="BOOLEAN">
                  <a:a name="DESC">
                  <a:v><![CDATA[EN:<html><p>This parameter globally enables the possibility to confiugre continuous without interrupt.
                        This is an Implementation Specific Parameter.</p></html>]]></a:v>
                  </a:a>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/> 
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Adc Continuous Without Interrupt Uses"/>
                  <a:a name="ORIGIN" value="NXP"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false" />
                  <a:a name="UUID" value="ECUC:b55a0f78-16d7-4d3c-91e5-ef1538b996ca" />
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
              
              <!-- AdcDemEventParameterRefs Big Container -->
              <v:ctr name="AdcDemEventParameterRefs" type="IDENTIFIABLE">
                <a:a name="LABEL" value="Adc Dem Event Parameter Refs" />
                <a:a name="DESC">
                    <a:v><![CDATA[EN:<html><p>
                          Container for the references to DemEventParameter elements which shall be invoked using the API Serr_NotifyErrorEvent API in case the corresponding error occurs. The EventId is taken from the referenced DemEventParameter&apos;s DemEventId value. The standardized errors are provided in the container and can be extended by vendor specific error references.</p></html>]]>
                    </a:v>
                </a:a>
                <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="OPTIONAL" value="true"/>
                <a:a name="UUID" value="ECUC:1847810a-fd53-4545-81f8-b889ba41adb6"/>
                <v:ref name="ADC_E_TIMEOUT" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="LABEL" value="Adc Timeout Dem Error" />
                    <a:a name="DESC">
                      <a:v><![CDATA[EN:<html><p>
                            Reference to configured DEM event to report &quot;Timeout failure&quot;.</p></html>]]>
                      </a:v>
                    </a:a>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="NXP"/>
                    <a:a name="UUID" value="ECUC:fcf47238-a9b4-4dd2-bf47-51036a0222c3"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:da name="REF" value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                    <a:da name="INVALID" type="XPath">
                        <a:tst expr="node:refvalid(.)" false="Invalid or empty reference."/>
                    </a:da>
                </v:ref>
               </v:ctr>

              <d:ref type="REFINED_MODULE_DEF" value="ASPath:/AUTOSAR/EcucDefs/Adc"/>
            </v:ctr>
          </d:chc>
          <d:chc name="Adc_EcuParameterDefinition" 
                 type="AR-ELEMENT" value="ECU_PARAMETER_DEFINITION">
            <d:ctr type="AR-ELEMENT">
              <a:a name="UUID" value="ECUC:f23762d6-4749-4f48-a7b5-c2cb915659ca"/>
              <a:a name="DEF" 
                   value="ASPath:/AR_PACKAGE_SCHEMA/ECU_PARAMETER_DEFINITION"/>
              <d:lst name="MODULE_REF">
                <d:ref type="MODULE_REF" value="ASPath:/TS_T40D2M10I2R0/Adc"/>
              </d:lst>
            </d:ctr>
          </d:chc>
            <d:chc name="Adc_ModuleDescription" type="AR-ELEMENT" value="BSW_MODULE_DESCRIPTION">
                <d:ctr type="AR-ELEMENT">
                    <a:a name="DEF"
                        value="ASPath:/AR_PACKAGE_SCHEMA/BSW_MODULE_DESCRIPTION"/>
                    <d:var name="MODULE_ID" type="INTEGER" >
                        <a:a name="EDITABLE" value="false"/>
                        <a:a name="IMPORTER_INFO" value="@DEF"/>
                    </d:var>
                    <d:ref type="RECOMMENDED_CONFIGURATION" >
                        <a:a name="EDITABLE" value="false"/>
                        <a:a name="IMPORTER_INFO" value="@DEF"/>
                    </d:ref>
                    <d:ref type="PRE_CONFIGURED_CONF" >
                        <a:a name="EDITABLE" value="false"/>
                        <a:a name="IMPORTER_INFO" value="@DEF"/>
                    </d:ref>
                    <d:ref type="VENDOR_SPECIFIC_MODULE_DEF"
                        value="ASPath:/TS_T40D2M10I2R0/Adc"/>
                </d:ctr>
            </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
